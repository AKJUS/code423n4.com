{
  "circa": {
    "title": "Venus Protocol Isolated Pools",
    "sponsor": "Venus Protocol",
    "slug": "2023-05-venus",
    "date": "2023-08-09",
    "findings": "https://github.com/code-423n4/2023-05-venus-findings/issues",
    "contest": 236
  },
  "html": "<h1 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h1>\n<h2 id=\"about-c4\" style=\"position:relative;\"><a href=\"#about-c4\" aria-label=\"about c4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>About C4</h2>\n<p>Code4rena (C4) is an open organization consisting of security researchers, auditors, developers, and individuals with domain expertise in smart contracts.</p>\n<p>A C4 audit is an event in which community participants, referred to as Wardens, review, audit, or analyze smart contract logic in exchange for a bounty provided by sponsoring projects.</p>\n<p>During the audit outlined in this document, C4 conducted an analysis of the Venus Protocol Isolated Pools smart contract system written in Solidity. The audit took place between May 8 - May 15 2023.</p>\n<h2 id=\"wardens\" style=\"position:relative;\"><a href=\"#wardens\" aria-label=\"wardens permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Wardens</h2>\n<p>113 Wardens contributed reports to the Venus Protocol Isolated Pools:</p>\n<ol>\n<li><a href=\"https://twitter.com/3xJanx2009\">0x73696d616f</a></li>\n<li><a href=\"twitter.com/0x8chars\">0x8chars</a></li>\n<li>0xAce (Coollaitar and <a href=\"https://twitter.com/AdityaKode3\">0xaditya</a>)</li>\n<li><a href=\"https://twitter.com/0xSmartContract\">0xSmartContract</a></li>\n<li><a href=\"https://twitter.com/Stalin_eth\">0xStalin</a></li>\n<li>0xWaitress</li>\n<li><a href=\"https://twitter.com/0xadrii\">0xadrii</a></li>\n<li>0xbepresent</li>\n<li>0xcm</li>\n<li>0xkazim</li>\n<li><a href=\"https://twitter.com/0xnevi\">0xnev</a></li>\n<li><a href=\"https://twitter.com/JP_Courses\">Audit_Avengers_2</a> (<a href=\"https://twitter.com/JP_Courses\">JP_Courses</a>, ravikiranweb3, <a href=\"https://www.linkedin.com/in/hamid-abubakr-732901ab/\">zzebra83</a> and <a href=\"https://twitter.com/Moshara87525498\">0xMosh</a>)</li>\n<li><a href=\"https://github.com/Aymen1001\">Aymen0909</a></li>\n<li>BGSecurity (<a href=\"https://twitter.com/anonresercher\">anonresercher</a> and <a href=\"https://github.com/martin-petrov03\">martin</a>)</li>\n<li>BPZ (Bitcoinfever244, PrasadLak and zinc42)</li>\n<li><a href=\"https://twitter.com/bauchibred?s=21&#x26;t=7sv-1qcnwtkdTA81Iog0yQ\">Bauchibred</a></li>\n<li>BoltzmannBrain</li>\n<li>Brenzee</li>\n<li><a href=\"https://twitter.com/0xnirlin\">BugBusters</a> (<a href=\"https://twitter.com/0xnirlin\">nirlin</a> and 0xepley)</li>\n<li>Cayo</li>\n<li>ChrisTina</li>\n<li><a href=\"https://twitter.com/Conan0x3\">Co0nan</a></li>\n<li><a href=\"https://twitter.com/DeFiCast\">Cryptor</a></li>\n<li>DeliChainSec (<a href=\"https://rafal-kalinowski.pl/\">deliriusz</a> and 0xffchain)</li>\n<li><a href=\"https://twitter.com/emeduduna\">Emmanuel</a></li>\n<li><a href=\"https://franfran.dev/\">Franfran</a></li>\n<li>IceBear</li>\n<li>Infect3d</li>\n<li>J4de</li>\n<li><a href=\"https://twitter.com/0xJCN\">JCN</a></li>\n<li>Josiah</li>\n<li><a href=\"https://twitter.com/CrystAlline_K42\">K42</a></li>\n<li>Kose</li>\n<li><a href=\"https://twitter.com/LobsterMindset\">Lilyjjo</a></li>\n<li><a href=\"https://twitter.com/LourensLinde\">LokiThe5th</a></li>\n<li>MohammedRizwan</li>\n<li><a href=\"https://twitter.com/0xcharwak\">Norah</a></li>\n<li><a href=\"https://twitter.com/Pronobis4\">PNS</a></li>\n<li>Parad0x</li>\n<li><a href=\"https://twitter.com/QiuhaoLi\">QiuhaoLi</a></li>\n<li>Rageur</li>\n<li>Raihan</li>\n<li>RaymondFam</li>\n<li>ReyAdmirado</li>\n<li>SAAJ</li>\n<li>SM3_SS</li>\n<li>SaeedAlipoor01988</li>\n<li><a href=\"https://www.linkedin.com/in/sathishkumar-p-26069915a\">Sathish9098</a></li>\n<li>Team_Rocket (Shame and AlexCzm)</li>\n<li><a href=\"https://github.com/udsene\">Udsen</a></li>\n<li>YakuzaKiawe</li>\n<li>Yardi256</li>\n<li>YoungWolves (lopotras and <a href=\"https://twitter.com/TheBlockChainer\">Bloqarl</a>)</li>\n<li>YungChaza</li>\n<li>ast3ros</li>\n<li>berlin-101</li>\n<li><a href=\"https://twitter.com/bin2chen\">bin2chen</a></li>\n<li>brgltd</li>\n<li>btk</li>\n<li><a href=\"https://twitter.com/c3ph_\">c3phas</a></li>\n<li><a href=\"https://twitter.com/carlitox477\">carlitox477</a></li>\n<li>chaieth</li>\n<li>codeslide</li>\n<li><a href=\"https://twitter.com/DevDacian\">dacian</a></li>\n<li>descharre</li>\n<li><a href=\"https://twitter.com/father0fBl0cks\">fatherOfBlocks</a></li>\n<li>frazerch</li>\n<li>fs0c</li>\n<li><a href=\"https://twitter.com/hunt3r_w3b\">hunter_w3b</a></li>\n<li>j4ld1na</li>\n<li>jasonxiale</li>\n<li><a href=\"https://twitter.com/JoeStakey\">joestakey</a></li>\n<li>kodyvim</li>\n<li>koxuan</li>\n<li><a href=\"https://twitter.com/LanreBayode1\">lanrebayode77</a></li>\n<li>lfzkoala</li>\n<li>lllu_23</li>\n<li>lukris02</li>\n<li>matrix_0wl</li>\n<li>mussucal</li>\n<li><a href=\"https://twitter.com/nadin20678790\">nadin</a></li>\n<li><a href=\"https://www.linkedin.com/in/naman-agrawal1778/\">naman1778</a></li>\n<li><a href=\"https://twitter.com/@PavanKumarKv2\">pavankv</a></li>\n<li>peanuts</li>\n<li>peritoflores</li>\n<li>petrichor</li>\n<li>pontifex</li>\n<li>qpzm</li>\n<li>rapha</li>\n<li>rvierdiiev</li>\n<li>sashik_eth</li>\n<li>sces60107</li>\n<li>souilos</li>\n<li>thekmj</li>\n<li>tnevler</li>\n<li><a href=\"https://twitter.com/0xVolodya\">volodya</a></li>\n<li><a href=\"https:://twitter.com/abdulwahedtalas\">wahedtalash77</a></li>\n<li><a href=\"https://www.market.dev\">wonjun</a></li>\n<li>xuwinnie</li>\n<li>yjrwkk</li>\n<li>yongskiws</li>\n<li>zzykxx</li>\n</ol>\n<p>This audit was judged by <a href=\"https://github.com/0xean\">0xean</a>.</p>\n<p>Final report assembled by thebrittfactor.</p>\n<h1 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h1>\n<p>The C4 analysis yielded an aggregated total of 17 unique vulnerabilities. Of these vulnerabilities, 1 received a risk rating in the category of HIGH severity and 16 received a risk rating in the category of MEDIUM severity.</p>\n<p>Additionally, C4 analysis included 42 reports detailing issues with a risk rating of LOW severity or non-critical. There were also 27 reports recommending gas optimizations.</p>\n<p>All of the issues presented here are linked back to their original finding.</p>\n<h1 id=\"scope\" style=\"position:relative;\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>The code under review can be found within the <a href=\"https://github.com/code-423n4/2023-05-venus\">C4 Venus Protocol Isolated Pools repository</a>, and is composed of 28 smart contracts written in the Solidity programming language and includes 3549 lines of Solidity code.</p>\n<h1 id=\"severity-criteria\" style=\"position:relative;\"><a href=\"#severity-criteria\" aria-label=\"severity criteria permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Severity Criteria</h1>\n<p>C4 assesses the severity of disclosed vulnerabilities based on three primary risk categories: high, medium, and low/non-critical.</p>\n<p>High-level considerations for vulnerabilities span the following key areas when conducting assessments:</p>\n<ul>\n<li>Malicious Input Handling</li>\n<li>Escalation of privileges</li>\n<li>Arithmetic</li>\n<li>Gas use</li>\n</ul>\n<p>For more information regarding the severity criteria referenced throughout the submission review process, please refer to the documentation provided on <a href=\"https://code4rena.com\">the C4 website</a>, specifically our section on <a href=\"https://docs.code4rena.com/awarding/judging-criteria/severity-categorization\">Severity Categorization</a>.</p>\n<h1 id=\"high-risk-findings-1\" style=\"position:relative;\"><a href=\"#high-risk-findings-1\" aria-label=\"high risk findings 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>High Risk Findings (1)</h1>\n<h2 id=\"h-01-incorrect-blocksperyear-constant-in-whitepaperinterestratemodel\" style=\"position:relative;\"><a href=\"#h-01-incorrect-blocksperyear-constant-in-whitepaperinterestratemodel\" aria-label=\"h 01 incorrect blocksperyear constant in whitepaperinterestratemodel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/320\">[H-01] Incorrect <code>blocksPerYear</code> constant in <code>WhitepaperInterestRateModel</code></a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/320\">Team_Rocket</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/570\">thekmj</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/559\">MohammedRizwan</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/528\">peritoflores</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/527\">DeliChainSec</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/482\">0xkazim</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/430\">sces60107</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/418\">0xkazim</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/394\">ast3ros</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/388\">BPZ</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/383\">carlitox477</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/326\">sashik_eth</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/313\">Yardi256</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/310\">berlin-101</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/290\">zzykxx</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/260\">Brenzee</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/225\">fs0c</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/209\">Franfran</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/174\">Bauchibred</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/155\">BoltzmannBrain</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/105\">SaeedAlipoor01988</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/32\">Lilyjjo</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/6\">volodya</a>.</em></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/WhitePaperInterestRateModel.sol#L17\">https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/WhitePaperInterestRateModel.sol#L17</a></p>\n<p>The interest rate per block is <strong>5x</strong> greater than it’s intended to be for markets that use the Whitepaper interest rate model.</p>\n<h3 id=\"proof-of-concept\" style=\"position:relative;\"><a href=\"#proof-of-concept\" aria-label=\"proof of concept permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>The <code>WhitePaperInterestRateModel</code> contract is forked from Compound Finance, which was designed to be deployed on Ethereum Mainnet. The <code>blocksPerYear</code> constant inside the contract is used to calculate the interest rate of the market on a per-block basis and is set to <strong>2102400</strong>, which assumes that there are 365 days a year and that the block-time is <strong>15 seconds</strong>.</p>\n<p>However, Venus Protocol is deployed on the BNB chain, which has a block-time of only <strong>3 seconds</strong>. This results in the interest rate per block on the BNB chain to be <strong>5x</strong> greater than intended.</p>\n<p>Both <code>baseRatePerBlock</code> and <code>multiplierPerBlock</code> are affected and are <strong>5x</strong> the value they should be. This also implies that the pool’s interest rate is also 5 times more sensitive to utilization rate changes than intended. It is impossible for the market to arbitrage and adjust the interest rate back to the intended rate as seen in the PoC graph below. It’s likely that arbitrageurs will deposit as much collateral as possible to take advantage of the high supply rate, leading to a utilization ratio close to 0.</p>\n<p>The following Python script plots the <code>WhitePaperInterestRateModel</code> curves for a 15 second and a 3 second block time.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">import</span><span class=\"mtk1\"> matplotlib.pyplot </span><span class=\"mtk15\">as</span><span class=\"mtk1\"> plt</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Constants</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">BASE = </span><span class=\"mtk7\">1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Solidity functions converted to Python functions</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">def</span><span class=\"mtk1\"> </span><span class=\"mtk11\">utilization_rate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">cash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrows</span><span class=\"mtk1\">, </span><span class=\"mtk12\">reserves</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> borrows == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk7\">0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> (borrows * BASE) / (cash + borrows - reserves)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">def</span><span class=\"mtk1\"> </span><span class=\"mtk11\">get_borrow_rate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">ur</span><span class=\"mtk1\">, </span><span class=\"mtk12\">base_rate_per_block</span><span class=\"mtk1\">, </span><span class=\"mtk12\">multiplier_per_block</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> ((ur * multiplier_per_block) / BASE) + base_rate_per_block</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">def</span><span class=\"mtk1\"> </span><span class=\"mtk11\">generate_data_points</span><span class=\"mtk1\">(</span><span class=\"mtk12\">base_rate_per_year</span><span class=\"mtk1\">, </span><span class=\"mtk12\">multiplier_per_year</span><span class=\"mtk1\">, </span><span class=\"mtk12\">blocks_per_year</span><span class=\"mtk1\">, </span><span class=\"mtk12\">cash</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrows</span><span class=\"mtk1\">, </span><span class=\"mtk12\">reserves</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    base_rate_per_block = base_rate_per_year / blocks_per_year</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    multiplier_per_block = multiplier_per_year / blocks_per_year</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    utilization_rates = [i / </span><span class=\"mtk7\">100</span><span class=\"mtk1\"> </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> i </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> </span><span class=\"mtk11\">range</span><span class=\"mtk1\">(</span><span class=\"mtk7\">101</span><span class=\"mtk1\">)]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    borrow_rates = [get_borrow_rate(ur * BASE, base_rate_per_block, multiplier_per_block) </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> ur </span><span class=\"mtk4\">in</span><span class=\"mtk1\"> utilization_rates]</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> utilization_rates, borrow_rates</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># User inputs</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">base_rate_per_year = </span><span class=\"mtk7\">5e16</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># 5%</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">multiplier_per_year = </span><span class=\"mtk7\">1e16</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># 1%</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">blocks_per_year1 = </span><span class=\"mtk7\">2102400</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># 15 second block-time</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">blocks_per_year2 = </span><span class=\"mtk7\">10512000</span><span class=\"mtk1\"> </span><span class=\"mtk3\"># 3 second block-time</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Example values for cash, borrows, and reserves</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">cash = </span><span class=\"mtk7\">1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">borrows = </span><span class=\"mtk7\">5e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">reserves = </span><span class=\"mtk7\">0.1e18</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Generate data points for both curves</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">utilization_rates1, borrow_rates1 = generate_data_points(base_rate_per_year, multiplier_per_year, blocks_per_year1, cash, borrows, reserves)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">utilization_rates2, borrow_rates2 = generate_data_points(base_rate_per_year, multiplier_per_year, blocks_per_year2, cash, borrows, reserves)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\"># Plot both curves on the same plot with a key</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plt.plot(utilization_rates1, borrow_rates1, </span><span class=\"mtk12\">label</span><span class=\"mtk1\">=</span><span class=\"mtk4\">f</span><span class=\"mtk8\">&quot;Blocks per year: </span><span class=\"mtk4\">{</span><span class=\"mtk1\">blocks_per_year1</span><span class=\"mtk4\">}</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plt.plot(utilization_rates2, borrow_rates2, </span><span class=\"mtk12\">label</span><span class=\"mtk1\">=</span><span class=\"mtk4\">f</span><span class=\"mtk8\">&quot;Blocks per year: </span><span class=\"mtk4\">{</span><span class=\"mtk1\">blocks_per_year2</span><span class=\"mtk4\">}</span><span class=\"mtk8\">&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plt.xlabel(</span><span class=\"mtk8\">&quot;Utilization Rate&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plt.ylabel(</span><span class=\"mtk8\">&quot;Borrow Rate&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plt.title(</span><span class=\"mtk8\">&quot;Interest Rate Curves&quot;</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plt.legend()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">plt.show()</span></span></span></code></pre>\n<p>Result:</p>\n<p><img src=\"https://i.imgur.com/0rotxUn.png\" alt=\"Interest Rate Per Block\"></p>\n<p>As seen above, the borrow rate curves are different and do not intersect. Hence, it’s impossible via arbitrage for market participants to adjust the rate back to its intended value.</p>\n<h3 id=\"recommended-mitigation-steps\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps\" aria-label=\"recommended mitigation steps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Fix the <code>blocksPerYear</code> constant so that it accurately describes the number of blocks a year on the BNB chain, which has a block-time of 15 seconds. The correct value is <strong>10512000</strong>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"math\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">\\begin{aligned}</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\\text{blocksPerYear} &amp;= \\frac{\\text{secondsInAYear}}{\\text{blockTime}} \\\\</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">&amp;= \\frac{365 \\times 24 \\times 60 \\times 60}{3} \\\\</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">&amp;= 10{,}512{,}000</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">\\end{aligned}</span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -14,7 +14,7 @@ contract WhitePaperInterestRateModel is InterestRateModel {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      * @notice The approximate number of blocks per year that is assumed by the interest rate model</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    uint256 public constant blocksPerYear = 2102400;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+    uint256 public constant blocksPerYear = 10512000;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      * @notice The multiplier of utilization rate that gives the slope of the interest rate</span></span></span></code></pre>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/320#issuecomment-1576929722\">0xean (judge) increased severity to High</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/559#issuecomment-1560167147\">chechu (Venus) confirmed via duplicate issue #559</a></strong></p>\n<hr>\n<h1 id=\"medium-risk-findings-16\" style=\"position:relative;\"><a href=\"#medium-risk-findings-16\" aria-label=\"medium risk findings 16 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Medium Risk Findings (16)</h1>\n<h2 id=\"m-01-malicious-actor-can-win-an-auction-unfavorably-to-the-protocol-by-block-stuffing\" style=\"position:relative;\"><a href=\"#m-01-malicious-actor-can-win-an-auction-unfavorably-to-the-protocol-by-block-stuffing\" aria-label=\"m 01 malicious actor can win an auction unfavorably to the protocol by block stuffing permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/525\">[M-01] Malicious actor can win an auction unfavorably to the protocol by block stuffing</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/525\">DeliChainSec</a></em></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L158-L202\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L158-L202</a><br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L467-L470\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L467-L470</a><br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L213\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L213</a></p>\n<p>When the protocol bad debt is auctioned off with 10% incentive at the beginning, a user who gives the best bid wins. The auction ends when at least one account placed a bid, and the current block number is bigger than <code>nextBidderBlockLimit</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"jsx\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">closeAuction</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Auction</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">auction</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">auctions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_isStarted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;no on-going auction&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">highestBidBlock</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">nextBidderBlockLimit</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">highestBidder</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk8\">&quot;waiting for next bidder. cannot close auction&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        );</span></span></span></code></pre>\n<p><code>nextBidderBlockLimit</code> is set to 10 in the initializer, which means that other users have only 30 seconds to place a better bid. This is a serious problem because stuffing a whole block with dummy transactions is very cheap on Binance Smart Chain. According to <a href=\"https://www.cryptoneur.xyz/en/gas-fees-calculator\">https://www.cryptoneur.xyz/en/gas-fees-calculator</a>, 15M gas - whole block - costs <code>$</code>14~<code>$</code>15 on BSC. This makes a malicious user occasionally cheaply prohibit other users to overbid them, winning the auction at the least favorable price for the protocol. Because BSC is a centralized blockchain, there are no private mempools and bribes directly to the miners (like in FlashBots); hence, other users are very limited concerning the prohibitive actions.</p>\n<h3 id=\"impact\" style=\"position:relative;\"><a href=\"#impact\" aria-label=\"impact permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Impact</h3>\n<p>The protocol overpays for bad debt, losing value.</p>\n<h3 id=\"proof-of-concept-1\" style=\"position:relative;\"><a href=\"#proof-of-concept-1\" aria-label=\"proof of concept 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<ol>\n<li>Pool gathered <code>$</code>100,000 in bad debt and it’s eligible for auction.</li>\n<li>A malicious user frontruns others and places the first bid with the least possible amount (bad debt + 10% incentive).</li>\n<li>The user sends dozens of dummy transactions with increased gas prices, only to fill up whole block space for 11 blocks.</li>\n<li>At the end, the user sends a transaction to close the auction, getting the bad debt + 10% incentive.</li>\n</ol>\n<h3 id=\"recommended-mitigation-steps-1\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-1\" aria-label=\"recommended mitigation steps 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>There are at least three options to resolve this issue:</p>\n<ol>\n<li>Make the bidding window much higher at the beginning; like 1000 blocks.</li>\n<li>Make the bidding window very high at the beginning and decrease it; the more attractive the new bid is.</li>\n<li>Make the bidding window dependent on the money at stake, to disincentivize block stuffing.</li>\n</ol>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/525#issuecomment-1560160686\">chechu (Venus) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-02-its-possible-to-borrow-redeem-transfer-tokens-and-exit-markets-with-outdated-collateral-prices-and-borrow-interest\" style=\"position:relative;\"><a href=\"#m-02-its-possible-to-borrow-redeem-transfer-tokens-and-exit-markets-with-outdated-collateral-prices-and-borrow-interest\" aria-label=\"m 02 its possible to borrow redeem transfer tokens and exit markets with outdated collateral prices and borrow interest permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/486\">[M-02] It’s possible to borrow, redeem, transfer tokens and exit markets with outdated collateral prices and borrow interest</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/486\">0x73696d616f</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/565\">pontifex</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/502\">0xbepresent</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/441\">J4de</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/437\">J4de</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/367\">0xkazim</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/319\">peanuts</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/211\">0xadrii</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/117\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/104\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/103\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/98\">volodya</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/89\">rvierdiiev</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/88\">rvierdiiev</a></em>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L199\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L199</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L299\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L299</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L324\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L324</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L553\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L553</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L1240\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L1240</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L1255\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L1255</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L578\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L578</a></p>\n<p>Incorrect <code>borrowBalance</code> and token collateral values. This could lead to many different exploits, such as:</p>\n<ul>\n<li>Users with a collateral token that fell substantially in price can borrow another underlying token, whose price has not been updated, and earn profit.</li>\n<li>Users can borrow/redeem/transfer more if the interest/price was not updated.</li>\n</ul>\n<h3 id=\"proof-of-concept-2\" style=\"position:relative;\"><a href=\"#proof-of-concept-2\" aria-label=\"proof of concept 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In the <code>Comptroller</code>, the total collateral balance and borrow balance are calculated at <code>_getHypotheticalLiquiditySnapshot(...)</code>. This function calculates these balances in the following loop:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">for (uint256 i; i &lt; assetsCount; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    VToken asset = assets[i];</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Read the balances and exchange rate from the vToken</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (uint256 vTokenBalance, uint256 borrowBalance, uint256 exchangeRateMantissa) = _safeGetAccountSnapshot(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        asset,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        account</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Get the normalized price of the asset</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Exp memory oraclePrice = Exp({ mantissa: _safeGetUnderlyingPrice(asset) });</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Pre-compute conversion factors from vTokens -&gt; usd</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Exp memory vTokenPrice = mul_(Exp({ mantissa: exchangeRateMantissa }), oraclePrice);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    Exp memory weightedVTokenPrice = mul_(weight(asset), vTokenPrice);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // weightedCollateral += weightedVTokenPrice * vTokenBalance</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    snapshot.weightedCollateral = mul_ScalarTruncateAddUInt(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        weightedVTokenPrice,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        vTokenBalance,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        snapshot.weightedCollateral</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    );</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // totalCollateral += vTokenPrice * vTokenBalance</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    snapshot.totalCollateral = mul_ScalarTruncateAddUInt(vTokenPrice, vTokenBalance, snapshot.totalCollateral);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // borrows += oraclePrice * borrowBalance</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    snapshot.borrows = mul_ScalarTruncateAddUInt(oraclePrice, borrowBalance, snapshot.borrows);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Calculate effects of interacting with vTokenModify</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (asset == vTokenModify) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // redeem effect</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // effects += tokensToDenom * redeemTokens</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        snapshot.effects = mul_ScalarTruncateAddUInt(weightedVTokenPrice, redeemTokens, snapshot.effects);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // borrow effect</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        // effects += oraclePrice * borrowAmount</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        snapshot.effects = mul_ScalarTruncateAddUInt(oraclePrice, borrowAmount, snapshot.effects);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>As seen, the oracle price is not updated via calling <code>updatePrice(...)</code>, nor is the borrow interest updated by calling <code>AccrueInterest(...)</code>. Only the corresponding <code>VToken</code> that called the <code>borrow(...)</code>, <code>transfer(...)</code> or <code>redeem(...)</code> has an updated price and interest, which could lead to critical inaccuracies for accounts with several VTokens.</p>\n<h3 id=\"tools-used\" style=\"position:relative;\"><a href=\"#tools-used\" aria-label=\"tools used permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Vscode, Hardhat</p>\n<h3 id=\"recommended-mitigation-steps-2\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-2\" aria-label=\"recommended mitigation steps 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Update the price and interest of every collateral, except the VToken that triggered the hook which has already been updated. Similarly to what is being done on <code>healAccount(...)</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">for (uint256 i; i &lt; userAssetsCount; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   userAssets[i].accrueInterest();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   oracle.updatePrice(address(userAssets[i]));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h3 id=\"assessed-type\" style=\"position:relative;\"><a href=\"#assessed-type\" aria-label=\"assessed type permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Oracle</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/88#issuecomment-1560085365\">chechu (Venus) acknowledged via duplicate issue #88 and commented</a>:</strong></p>\n<blockquote>\n<p>Oracle price of every market is updated on every action involving directly that market. We didn’t update the prices of every market (secondarily) used in some operations to save gas, assuming the price would be valid (there are mechanisms in the Oracles to avoid the use of old prices). We’ll monitor this topic to decide if our approach is enough or if we have to update the price of every market every time we invoke <code>_getHypotheticalLiquiditySnapshot</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/486#issuecomment-1576881521\">0xean (judge) decreased severity to Medium</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/486#issuecomment-1582329952\">chechu (Venus) commented</a>:</strong></p>\n<blockquote>\n<p>To share more info related to this topic:</p>\n<ul>\n<li>As we said in <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/88\">#88</a>, we assume the prices in the rest of the markets will be updated frequently because they are updated every time other users interact directly with these other markets</li>\n<li>\n<p>Moreover, “update” in our context only affects the TWAP oracle. As you can see <a href=\"https://github.com/VenusProtocol/oracle\">here</a>, our oracles system uses Chainlink, Binance Oracle, Pyth, and TWAP sources.</p>\n<ul>\n<li>Chainlink and Binance prices are not updated by Venus anyway. Chainlink and Binance update these price feeds following the classical rules of heartbeat and deviation (example <a href=\"https://oracle.binance.com/docs/price-feeds/feeds-available/\">here</a>). In the Oracle system, we check the last time these prices were updated and discard them (reverting the TX) if they are staled.</li>\n<li>TWAP needs a proactive update, executed by Venus when the mentioned <code>oracle.updatePrice</code> is invoked. If no one invokes this update function for an asset later used indirectly by another user, and the difference between the price offered by the TWAP oracle and the rest of the oracles (i.e. Chainlink) is greater than a threshold configure in our Oracle system, the TX will be also reverted. Could this generate a DoS? I suppose that potentially it can do it, but as soon as a user interacts with the “staled” asset in Venus the block will disappear.</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/486#issuecomment-1582518553\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@chechu - I believe I should mark #104 as a dupe of this as well.  Since this issue talks about both prices updated and accruing interests.</p>\n<blockquote>\n<p>we assume the prices in the rest of the markets will be updated frequently because they are updated every time other users interact directly with these other markets</p>\n</blockquote>\n<p>This assumption I think has risks in which the wardens are calling out.  It’s hard to say how real these risks are apriori without making assumptions about the usage of all the markets. </p>\n<p>I think these issues should be batched together over concerns around <code>accrueInterest</code> and price updates into a single M issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/486#issuecomment-1582683604\">chechu (Venus) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>This assumption I think has risks in which the wardens are calling out. It’s hard to say how real these risks are apriori without making assumptions about the usage of all the markets.</p>\n</blockquote>\n<p>@0xean - In my honest opinion, I think the risk is low, but I could understand the concern and the lack of a guarantee in the code.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-03-liquidateaccount-will-fail-if-the-transaction-is-not-included-in-the-current-block\" style=\"position:relative;\"><a href=\"#m-03-liquidateaccount-will-fail-if-the-transaction-is-not-included-in-the-current-block\" aria-label=\"m 03 liquidateaccount will fail if the transaction is not included in the current block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365\">[M-03] liquidateAccount will fail if the transaction is not included in the current block</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365\">xuwinnie</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/545\">Udsen</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/195\">mussucal</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/156\">BoltzmannBrain</a></em>.</p>\n<p>Functon <code>liquidateAccount</code> will fail if the transaction is not included in the current block because interest accrues per block, and <code>repayAmount</code> and <code>borrowBalance</code> need to match precisely.</p>\n<h3 id=\"proof-of-concept-3\" style=\"position:relative;\"><a href=\"#proof-of-concept-3\" aria-label=\"proof of concept 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>At the end of the function <code>liquidateAccount</code>, a check is performed to ensure that the <code>borrowBalance</code> is zero:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">for (uint256 i; i &lt; marketsCount; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (, uint256 borrowBalance, ) = _safeGetAccountSnapshot(borrowMarkets[i], borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(borrowBalance == 0, &quot;Nonzero borrow balance after liquidation&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>This means that <code>repayAmount</code> specified in calldata must exactly match the <code>borrowBalance</code> call. (If <code>repayAmount</code> is greater than <code>borrowBalance</code>, <code>Comptroller.preLiquidateHook</code> will revert with the error <code>TooMuchRepay</code>.) However, the <code>borrowBalance</code> updates every block due to interest accrual. The liquidator cannot be certain that their transaction will be included in the current block or in a future block. This uncertainty significantly increases the likelihood of liquidation failure.</p>\n<h3 id=\"recommended-mitigation-steps-3\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-3\" aria-label=\"recommended mitigation steps 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use a looser check:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">snapshot = _getCurrentLiquiditySnapshot(borrower, _getLiquidationThreshold);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">require (snapshot.shortfall == 0);</span></span></code></pre>\n<p>to replace:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">for (uint256 i; i &lt; marketsCount; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (, uint256 borrowBalance, ) = _safeGetAccountSnapshot(borrowMarkets[i], borrower);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        require(borrowBalance == 0, &quot;Nonzero borrow balance after liquidation&quot;);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<h3 id=\"assessed-type-1\" style=\"position:relative;\"><a href=\"#assessed-type-1\" aria-label=\"assessed type 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Invalid Validation</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/545#issuecomment-1560165204\">chechu (Venus) confirmed via duplicate issue #545</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365#issuecomment-1560142732\">chechu (Venus) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Suggestion: QA (no risk for funds, no risk of DoS).</p>\n<p>The liquidator has to take into account the pending interests to be accrued before invoking <code>liquidateAccount</code>. It’s technically feasible and if the TX fails, they can retry it, so finally the position will be liquidated. The amount to be liquidated will be very low, so we don’t see any risk of front running.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365#issuecomment-1569305443\">0xean (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>They would have to know which block specifically their transaction would get mined in to be able to precompute this. </p>\n<p>While they could retry the transaction, I do think this will have an impact of the protocol’s availability under normal conditions and therefore does meet the criteria for Medium severity. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365#issuecomment-1582340436\">chechu (Venus) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>They would have to know which block specifically their transaction would get mined in to be able to precompute this.</p>\n<p>While they could retry the transaction, I do think this will have an impact of the protocol’s availability under normal conditions and therefore does meet the criteria for Medium severity.</p>\n</blockquote>\n<p>@0xean - The liquidator can calculate the exact needed amount in a contract; for example, to guarantee that the amount is valid in the same block where the transaction will be minted.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365#issuecomment-1582480812\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@chechu - I agree, that is possible, but how does one do this from an EOA?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365#issuecomment-1582621294\">chechu (Venus) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>@chechu - I agree, that is possible, but how does one do this from an EOA?</p>\n</blockquote>\n<p>@0xean - with an EOA I would do a multicall, first statically invoking the functions to accrue interest, and then invoking the function to get the precise borrow amounts. You could use <a href=\"https://www.npmjs.com/package/ethereum-multicall\">https://www.npmjs.com/package/ethereum-multicall</a> to do this. We do something similar in our frontend <a href=\"https://github.com/VenusProtocol/venus-protocol-interface/blob/develop/src/clients/api/queries/getVaiCalculateRepayAmount/index.ts#L17-L33\">here</a>.</p>\n<p>By doing this, it’s true that your TX may not be included in the current block and it won’t be valid in the next one.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/365#issuecomment-1582643306\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Yeah, this seems like a workaround to the problem, in my opinion.  Why would you be opposed to simply updating the function to make it more tolerant to the specific block it’s called in?</p>\n</blockquote>\n<hr>\n<h2 id=\"m-04-_ensuremaxloops-causes-liquidateaccount-to-fail-in-certain-conditions\" style=\"position:relative;\"><a href=\"#m-04-_ensuremaxloops-causes-liquidateaccount-to-fail-in-certain-conditions\" aria-label=\"m 04 _ensuremaxloops causes liquidateaccount to fail in certain conditions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/327\">[M-04] <code>_ensureMaxLoops</code> causes liquidateAccount to fail in certain conditions</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/327\">xuwinnie</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/428\">0x8chars</a></em>.</p>\n<p>The function <code>_ensureMaxLoops</code> reverts if the iteration count exceeds the <code>maxLoopsLimit</code>. However, the limitation imposed by <code>maxLoopsLimit</code> hinders the functioning of <code>liquidateAccount</code> under certain conditions, as <code>orderCount</code> needs to reach twice the market count (which is also constrained by the <code>maxLoopsLimit</code>) in extreme cases.</p>\n<h3 id=\"proof-of-concept-4\" style=\"position:relative;\"><a href=\"#proof-of-concept-4\" aria-label=\"proof of concept 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Suppose <code>maxLoopsLimit</code> is set to <strong>16</strong> and currently <strong>12</strong> markets have been added, which is allowed by <code>_ensureMaxLoops</code> in function <code>_addMarket</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">allMarkets.push(VToken(vToken));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">marketsCount = allMarkets.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">_ensureMaxLoops(marketsCount);</span></span></code></pre>\n<p>Then, Alice enters all <strong>12</strong> markets by depositing and borrowing simultaneously, which is also allowed by <code>_ensureMaxLoops</code> in function <code>enterMarkets</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 len = vTokens.length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">uint256 accountAssetsLen = accountAssets[msg.sender].length;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">_ensureMaxLoops(accountAssetsLen + len);</span></span></code></pre>\n<p>To illustrate, assume these <strong>12</strong> coins are all stablecoin with an equal value. Let’s call them USDA - USDL. Alice deposits 20 USDA, 1.1 USDB - 1.1 USDL, worth 32.1 USD in total. Then she borrows 2 USDA - 2 USDL, worth 24 USD in total. Unluckily, USDA de-pegs to 0.6 USD and Alice’s deposit value drops to 24.1 USD, which is below the liquidation threshold (also below the <code>minLiquidatableCollateral</code>). However, nobody can liquidate Alice’s account by calling <code>liquidateAccount</code>, because the least possible <code>orderCount</code> is <strong>23</strong>, which exceeds <code>maxLoopsLimit</code>.</p>\n<p>Let’s take a closer look at <code>LiquidationOrder</code>:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"11\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">struct LiquidationOrder {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       VToken vTokenCollateral;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       VToken vTokenBorrowed;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       uint256 repayAmount;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>In this case, the liquidator cannot perfectly match <code>vTokenCollateral</code> with <code>vTokenBorrowed</code> one-to-one. Because the value of collateral and debt is not equal, more than one order is needed to liquidate each asset. To generalize, if the asset count is <strong>n</strong>, in the worst case, <strong>2n-1</strong> orders are needed for a complete liquidation (not hard to prove).</p>\n<h3 id=\"recommended-mitigation-steps-4\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-4\" aria-label=\"recommended mitigation steps 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"12\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">_ensureMaxLoops(ordersCount / 2);</span></span></code></pre>\n<h3 id=\"assessed-type-2\" style=\"position:relative;\"><a href=\"#assessed-type-2\" aria-label=\"assessed type 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Loop</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/327#issuecomment-1552879540\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>more than one order is needed to liquidate each asset</p>\n</blockquote>\n<p>I am not sure I am tracking this assertion in the above report.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/327#issuecomment-1560141814\">chechu (Venus) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>We can resolve it by just increasing the limit accepted by <code>_ensureMaxLoops</code>, with a VIP. By the way, the suggestion is not valid, because the number of iterations will be <code>ordersCount</code>, not <code>ordersCount/2</code>.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/327#issuecomment-1569216286\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>We can resolve it by just increasing the limit accepted by <code>_ensureMaxLoops</code>, with a VIP.</p>\n</blockquote>\n<p>I don’t think this is a valid mitigation and would still cause a disruption to the protocol that warrants the Medium severity. </p>\n<p>Per the C4 docs </p>\n<blockquote>\n<p>2 Med: Assets not at direct risk, but the function of the protocol or its availability could be impacted, or leak value with a hypothetical attack path with stated assumptions, but external requirements.</p>\n</blockquote>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/327#issuecomment-1569220432\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@chechu - the validity of this issue comes down to the assumption of there being more than 1 order per asset, let’s discuss that point specifically, because otherwise, this issue doesn’t seem to be valid. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/327#issuecomment-1575606861\">chechu (Venus) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>Sorry for the delay in my response. Reviewing it more carefully, the finding seems valid. It’s true that in <code>Comptroller.liquidateAccount</code> several orders per borrowed asset could be needed. Example:</p>\n<p>Params:</p>\n<ul>\n<li>liquidationIncentiveMantissa: 1.1</li>\n<li>minLiquidatableCollateral: <code>$</code>100</li>\n</ul>\n<p>Borrower position:</p>\n<ul>\n<li>\n<p>Collateral:</p>\n<ul>\n<li>USDC: <code>$</code>20 (liquidation threshold: 0.8)</li>\n<li>USDT: <code>$</code>20 (liquidation threshold: 0.8)</li>\n</ul>\n</li>\n<li>Borrow CAKE: <code>$</code>35</li>\n</ul>\n<p>Every condition is satisfied to allow the execution of <code>liquidationAccount</code>:</p>\n<ul>\n<li>Total collateral (<code>$</code>40) &#x3C; minLiquidatableCollateral (<code>$</code>100)</li>\n<li><code>collateralToSeize</code> (<code>$</code>35 * 1.1 = <code>$</code>38.5) &#x3C; total collateral (<code>$</code>40)</li>\n<li>Shortfall (<code>$</code>35 - (<code>$</code>20 * 0.8 + <code>$</code>20 * 0.8) = <code>$</code>3) > 0</li>\n</ul>\n<p>But the liquidator cannot repay <code>$</code>35 of the borrowed asset and get enough tokens of just one of the collaterals. So, the liquidator will need two orders:</p>\n<ul>\n<li>\n<p>order 1:</p>\n<ul>\n<li>collateral USDC</li>\n<li>borrowed asset: CAKE</li>\n<li>repay amount: <code>$</code>17.5 (getting <code>$</code>19.25 of USDC)</li>\n</ul>\n</li>\n<li>\n<p>order 2:</p>\n<ul>\n<li>collateral USDT</li>\n<li>borrowed asset: CAKE</li>\n<li>repay amount: <code>$</code>17.5 (getting <code>$</code>19.25 of USDT)</li>\n</ul>\n</li>\n</ul>\n<p>This way, the final position of the borrower will be:</p>\n<ul>\n<li>\n<p>Collateral:</p>\n<ul>\n<li>USDC: <code>$</code>0.75</li>\n<li>USDT: <code>$</code>0.75</li>\n</ul>\n</li>\n<li>Borrow CAKE: <code>$</code>0 &#x3C;— that is required at the end of the <code>Comptroller.liquidateAccount</code>, and it would be impossible to get only using one of the available collaterals</li>\n</ul>\n<p>We will apply the mitigation suggested by the warden.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-05-bad-debt-in-poollenssolgetpoolbaddebt-is-not-calculated-correctly-in-usd\" style=\"position:relative;\"><a href=\"#m-05-bad-debt-in-poollenssolgetpoolbaddebt-is-not-calculated-correctly-in-usd\" aria-label=\"m 05 bad debt in poollenssolgetpoolbaddebt is not calculated correctly in usd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/316\">[M-05] Bad Debt in PoolLens.sol#getPoolBadDebt() is not calculated correctly in USD</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/316\">peanuts</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/385\">jasonxiale</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/274\">0xStalin</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/40\">volodya</a></em>.</p>\n<h3 id=\"proof-of-concept-5\" style=\"position:relative;\"><a href=\"#proof-of-concept-5\" aria-label=\"proof of concept 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In <code>PoolLens.sol#getPoolBadDebt()</code>, bad debt is calculated as such:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"13\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">            badDebt.badDebtUsd =</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                VToken(address(markets[i])).badDebt() *</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                priceOracle.getUnderlyingPrice(address(markets[i]));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            badDebtSummary.badDebts[i] = badDebt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            totalBadDebtUsd = totalBadDebtUsd + badDebt.badDebtUsd;</span></span></code></pre>\n<p>In <code>Shortfall.sol#\\_startAuction()</code>, bad debt is calculated as such:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"14\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">        uint256[] memory marketsDebt = new uint256[](marketsCount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        auction.markets = new VToken[](marketsCount);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        for (uint256 i; i &lt; marketsCount; ++i) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            uint256 marketBadDebt = vTokens[i].badDebt();</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            priceOracle.updatePrice(address(vTokens[i]));</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            uint256 usdValue = (priceOracle.getUnderlyingPrice(address(vTokens[i])) * marketBadDebt) / 1e18;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            poolBadDebt = poolBadDebt + usdValue;</span></span></code></pre>\n<p>Focus on the line with the <code>priceOracle.getUnderlyingPrice</code>. In <code>PoolLens.sol#getPoolBadDebt</code>, <code>badDebt</code> in USD is calculated by multiplying the bad debt of the VToken market by the underlying price. However, in <code>Shortfall</code>, <code>badDebt</code> in USD is calculated by the bad debt of the VToken market by the underlying price and divided by 1e18.</p>\n<p>The <code>PoolLens#getPoolBadDebt()</code> function doesn’t divide the debt in USD by 1e18.</p>\n<p>This is what the function is actually counting:</p>\n<p>Let’s say that the VToken market has a <code>badDebt</code> of 1.3 ETH (1e18 ETH). The pool intends to calculate 1.3 ETH in terms of USD, so it calls the oracle to determine the price of ETH. Let’s say the price of ETH is 1500 USD. The total pool debt should be 1.3 * 1500 = 1950 USD. In decimal calculation, the pool debt should be 1.3e18 * 1500e18 (if oracle returns in 18 decimal places) / 1e18 = 1950e18.</p>\n<p>The badDebt in USD in <code>PoolLens.sol#getPoolBadDebt()</code> will be massively inflated.</p>\n<h3 id=\"tools-used-1\" style=\"position:relative;\"><a href=\"#tools-used-1\" aria-label=\"tools used 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VSCode</p>\n<h3 id=\"recommended-mitigation-steps-5\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-5\" aria-label=\"recommended mitigation steps 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Normalize the decimals of the bad debt calculation in <code>getPoolBadDebt()</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"15\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">            badDebt.badDebtUsd =</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                VToken(address(markets[i])).badDebt() *</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">+               priceOracle.getUnderlyingPrice(address(markets[i])) / 1e18;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            badDebtSummary.badDebts[i] = badDebt;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">            totalBadDebtUsd = totalBadDebtUsd + badDebt.badDebtUsd;</span></span></code></pre>\n<h3 id=\"assessed-type-3\" style=\"position:relative;\"><a href=\"#assessed-type-3\" aria-label=\"assessed type 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Decimal</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/316#issuecomment-1560138640\">chechu (Venus) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-06-potential-unjust-liquidation-after-exiting-market-\" style=\"position:relative;\"><a href=\"#m-06-potential-unjust-liquidation-after-exiting-market-\" aria-label=\"m 06 potential unjust liquidation after exiting market  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/309\">[M-06] Potential Unjust Liquidation After Exiting Market </a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/309\">0xcm</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/571\">thekmj</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/67\">bin2chen</a></em>.</p>\n<p>Users might face unjust liquidation of their assets even after exiting a particular market. This could lead to potential financial losses for users, and it might undermine the trust and reputation of the platform.</p>\n<h3 id=\"proof-of-concept-6\" style=\"position:relative;\"><a href=\"#proof-of-concept-6\" aria-label=\"proof of concept 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Consider a user with the following financial status:</p>\n<ul>\n<li>Collateral: 1 Bitcoin (BTC), worth <code>$</code>30,000, and 10,000 USDT, worth <code>$</code>10,000.</li>\n<li>Outstanding loan: 1 Ethereum (ETH), worth <code>$</code>3,000.</li>\n<li>The user decides to remove their risk from BTC volatility and exits the BTC market. As per the protocol’s rules, exiting the market should remove BTC from their collateral.</li>\n<li>Following the user’s exit from the BTC market, a sharp rise in the ETH price occurs, and it surpasses <code>$</code>10,000.</li>\n<li>Due to the increase in ETH price, the system identifies that the user’s collateral (now only 10,000 USDT) is insufficient to cover their loan, leading to an insufficient collateralization rate.</li>\n<li>Despite the user’s exit from the BTC market, the system still triggers a liquidation process to liquidate BTC as collateral.</li>\n</ul>\n<p>In reality, if the BTC was still part of the user’s collateral, the total collateral value would have been <code>$</code>40,000 (<code>$</code>30,000 from BTC and <code>$</code>10,000 from USDT). This total value would be sufficient to cover the ETH loan even with the price surge of ETH. Therefore, the user should not have faced liquidation.</p>\n<p>This can be traced back to the missing membership check in <code>preLiquidateHook</code> function which does not consider if the user has exited the market or not.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/Comptroller.sol#L424-L526\">https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/Comptroller.sol#L424-L526</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"16\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">preLiquidateHook</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">repayAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">bool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">skipLiquidityCheck</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Pause Action.LIQUIDATE on BORROWED TOKEN to prevent liquidating it.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// If we want to pause liquidating to vTokenCollateral, we should pause</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Action.SEIZE on it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_checkActionPauseState</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Action</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LIQUIDATE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updatePrice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updatePrice</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">].</span><span class=\"mtk12\">isListed</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MarketNotListed</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">].</span><span class=\"mtk12\">isListed</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MarketNotListed</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowBalance</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">).</span><span class=\"mtk11\">borrowBalanceStored</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/* Allow accounts to be liquidated if the market is deprecated or it is a forced liquidation */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">skipLiquidityCheck</span><span class=\"mtk1\"> || </span><span class=\"mtk11\">isDeprecated</span><span class=\"mtk1\">(</span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">))) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">repayAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">borrowBalance</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TooMuchRepay</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">return</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/* The borrower must have shortfall and collateral &gt; threshold in order to be liquidatable */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">AccountLiquiditySnapshot</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">snapshot</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_getCurrentLiquiditySnapshot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">, </span><span class=\"mtk12\">_getLiquidationThreshold</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">snapshot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalCollateral</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">minLiquidatableCollateral</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">/* The liquidator should use either liquidateAccount or healAccount */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MinimalCollateralViolated</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minLiquidatableCollateral</span><span class=\"mtk1\">, </span><span class=\"mtk12\">snapshot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">totalCollateral</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">snapshot</span><span class=\"mtk1\">.</span><span class=\"mtk12\">shortfall</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">InsufficientShortfall</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">/* The liquidator may not repay more than what is allowed by the closeFactor */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">maxClose</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">mul_ScalarTruncate</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Exp</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">mantissa:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">closeFactorMantissa</span><span class=\"mtk1\"> }), </span><span class=\"mtk12\">borrowBalance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">repayAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxClose</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TooMuchRepay</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk3\">/**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@notice</span><span class=\"mtk3\"> Checks if the seizing of assets should be allowed to occur</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk3\"> Asset which was used as collateral and will be seized</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">seizerContract</span><span class=\"mtk3\"> Contract that tries to seize the asset (either borrowed vToken or Comptroller)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">liquidator</span><span class=\"mtk3\"> The address repaying the borrow and seizing the collateral</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * </span><span class=\"mtk4\">@param</span><span class=\"mtk3\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk3\"> The address of the borrower</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * @custom:error ActionPaused error is thrown if seizing this type of collateral is paused</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * @custom:error MarketNotListed error is thrown if either collateral or borrowed token is not listed</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * @custom:error ComptrollerMismatch error is when seizer contract or seized asset belong to different pools</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     * @custom:access Not restricted</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">     */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">preSeizeHook</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">seizerContract</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Pause Action.SEIZE on COLLATERAL to prevent seizing it.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// If we want to pause liquidating vTokenBorrowed, we should pause</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Action.LIQUIDATE on it</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">_checkActionPauseState</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">, </span><span class=\"mtk12\">Action</span><span class=\"mtk1\">.</span><span class=\"mtk12\">SEIZE</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">].</span><span class=\"mtk12\">isListed</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MarketNotListed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">seizerContract</span><span class=\"mtk1\"> == </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// If Comptroller is the seizer, just check if collateral&#39;s comptroller</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// is equal to the current address</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">).</span><span class=\"mtk11\">comptroller</span><span class=\"mtk1\">()) != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">)) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ComptrollerMismatch</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// If the seizer is not the Comptroller, check that the seizer is a</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// listed market, and that the markets&#39; comptrollers match</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">seizerContract</span><span class=\"mtk1\">].</span><span class=\"mtk12\">isListed</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MarketNotListed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">seizerContract</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">).</span><span class=\"mtk11\">comptroller</span><span class=\"mtk1\">() != </span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">seizerContract</span><span class=\"mtk1\">).</span><span class=\"mtk11\">comptroller</span><span class=\"mtk1\">()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">ComptrollerMismatch</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk3\">// Keep the flywheel moving</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardDistributorsCount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">rewardsDistributors</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">rewardDistributorsCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">rewardsDistributors</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">updateRewardTokenSupplyIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">rewardsDistributors</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">distributeSupplierRewardToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">rewardsDistributors</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">distributeSupplierRewardToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">, </span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>In essence, the user is punished for market volatility, even after they have taken steps to protect themselves (by exiting the BTC market).</p>\n<h3 id=\"recommended-mitigation-steps-6\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-6\" aria-label=\"recommended mitigation steps 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Update the <code>preLiquidateHook</code> function to check if a user has exited a market before proceeding with liquidation.</p>\n<h3 id=\"assessed-type-4\" style=\"position:relative;\"><a href=\"#assessed-type-4\" aria-label=\"assessed type 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Invalid Validation</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/309#issuecomment-1560105655\">chechu (Venus) disputed and commented</a>:</strong></p>\n<blockquote>\n<p>This is the desired behaviour. Even if user exits a market, we expect user to maintain healthy position to protect the protocol.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/309#issuecomment-1569226302\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@chechu - By exiting the market, the user is no longer expecting those assets to be used as collateral.</p>\n<blockquote>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"17\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"> * @notice Removes asset from sender&#39;s account liquidity calculation; disabling them as collateral</span></span></code></pre>\n</blockquote>\n<p>So while the user is still expected to maintain a healthy position with the assets they have marked as being part of their collateral, do you agree that assets that are not being used as part of their collateral should not be seized?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/309#issuecomment-1570036501\">chechu (Venus) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>We have been reviewing this topic internally. Compound allows the seizing of tokens from markets not enabled as collateral. And our code does the same.</p>\n<p>But, we added the sentence <code>disabling them as collateral</code> in the <code>Comptroller.exitMarket</code> function, so we think it’s fair to forbid seizing if the borrower didn’t enable the market as collateral.</p>\n<p>So, I would say the issue is valid, and we’ll work to mitigate it (we’ll add the check in the <code>preSeizeHook</code>, which is also used in the <code>healAccount</code> flow).</p>\n</blockquote>\n<hr>\n<h2 id=\"m-07-dos-attack-prevents-refunding-previous-bid-in-shortfallsol-and-malicious-bidder-always-wins-the-auction\" style=\"position:relative;\"><a href=\"#m-07-dos-attack-prevents-refunding-previous-bid-in-shortfallsol-and-malicious-bidder-always-wins-the-auction\" aria-label=\"m 07 dos attack prevents refunding previous bid in shortfallsol and malicious bidder always wins the auction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/305\">[M-07] DOS attack prevents refunding previous bid in Shortfall.sol and malicious bidder always wins the auction</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/305\">berlin-101</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/472\">Emmanuel</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/461\">YungChaza</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/412\">Emmanuel</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/376\">sashik_eth</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/323\">Team_Rocket</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/227\">fs0c</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/226\">fs0c</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/194\">Audit_Avengers_2</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/124\">0xadrii</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/63\">bin2chen</a></em>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L183\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L183</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L190\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L190</a></p>\n<p>The auction logic in <code>Shortfall.sol</code> refunds the previously accepted (highest) bid when a new acceptable bid is placed via the <code>placeBid</code> function.</p>\n<p>It is important that this refund succeeds as otherwise a new acceptable (higher) bid is not possible and the auction is disrupted which consequently makes the current highest bidder the auction winner and causes a loss for the Venus project and its users.</p>\n<p>When refunding the <code>safeTransfer</code> of OpenZeppelin <code>SafeERC20Upgradeable</code> (inheriting from <code>SafeERC20</code>) is used which deals with the multiple ways in which different ERC-20 (BEP-20) tokens indicate the success/failure of a token transfer.</p>\n<p>For details see: <a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol#L12\">https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/utils/SafeERC20.sol#L12</a></p>\n<p>Nevertheless, there are additional scenarios that may still disrupt the auction and put it into a state of DOS (Denial of Service). Specifically, 2 scenarios were identified:</p>\n<ol>\n<li>DOS with the underlying token implementing a blacklist.</li>\n<li>DOS with the underlying token being an ERC20-compatible ERC777 token.</li>\n</ol>\n<h3 id=\"proof-of-concept-7\" style=\"position:relative;\"><a href=\"#proof-of-concept-7\" aria-label=\"proof of concept 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<h3 id=\"1-dos-with-the-underlying-token-implementing-a-blacklist\" style=\"position:relative;\"><a href=\"#1-dos-with-the-underlying-token-implementing-a-blacklist\" aria-label=\"1 dos with the underlying token implementing a blacklist permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. DOS with the underlying token implementing a blacklist</h3>\n<p>In this scenario, the underlying token is implemented with a blacklist (also known as blocklist).</p>\n<p>Because this is common for tokens on the Ethereum network (e.g. USDC/USDT implementing blacklist/blocklist; See: <a href=\"https://github.com/d-xo/weird-erc20\">https://github.com/d-xo/weird-erc20</a>) this is a scenario also possible for tokens on the Binance Chain.</p>\n<p>And since it is not specifically stated that such tokens are excluded from the Venus project, while the fee on transfer/deflationary/rebase tokens are specifically mentioned to be excluded, this is assumed to be a potential issue.</p>\n<p>The following steps describe the issue:</p>\n<ol>\n<li>Bidder 1 makes a bid while he is not on the token blacklist.</li>\n<li>After the bid, he is put on the token blacklist.</li>\n<li>Bidder 2 makes a higher bid and the refund to bidder 1 is attempted.</li>\n<li>The refund reverts due to bidder 1 being blacklisted which blocks the token transfer back.</li>\n<li>Bidder 1 remains the highest bidder and wins the auction.</li>\n</ol>\n<h3 id=\"2-dos-with-the-underlying-token-being-an-erc20-compatible-erc777-token\" style=\"position:relative;\"><a href=\"#2-dos-with-the-underlying-token-being-an-erc20-compatible-erc777-token\" aria-label=\"2 dos with the underlying token being an erc20 compatible erc777 token permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DOS with the underlying token being an ERC20-compatible ERC777 token.</h3>\n<p>In this scenario, the underlying token is an ER777 token instead of an ERC20. Since the audit does not specifically state that ERC777 tokens (which are ERC-20 compatible) are out of scope, this is assumed to be a potential issue.</p>\n<p>See <a href=\"https://docs.openzeppelin.com/contracts/2.x/api/token/erc777\">https://docs.openzeppelin.com/contracts/2.x/api/token/erc777</a> for details on ERC777 tokens.</p>\n<p>The following steps describe the issue:</p>\n<ol>\n<li>Bidder 1 implements a contract that acts as an “ERC777 recipient” which can either accept/reject tokens that are transferred to it.</li>\n<li>Bidder 1 makes a bid not with an EOA (externally owned account) but uses his smart contract to make the bid.</li>\n<li>After the bid was accepted, he activates his smart contract and rejects any tokens transferred to it.</li>\n<li>Bidder 2 makes a higher bid and the refund to the smart contract of bidder 1 is attempted.</li>\n<li>The refund fails due to the smart contract of bidder 1 rejecting the token transfer (ERC777 token calls <code>tokensReceived</code> function of receiving a smart contract to finalize the token transfer which reverts).</li>\n<li>Bidder 1 remains the highest bidder and wins the auction.</li>\n</ol>\n<h3 id=\"coded-poc\" style=\"position:relative;\"><a href=\"#coded-poc\" aria-label=\"coded poc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Coded POC</h3>\n<p>To prove both aforementioned scenarios of putting the auction into a state of DOS, the <code>Shortfall.ts</code> test was modified and 1 test case for each scenario was added. Code for additional required mock tokens etc. (<code>MockTokenERC20Blacklistable.sol</code>, <code>MockTokenERC777.sol</code>, <code>ERC777Recipient.sol</code>) are included.</p>\n<p><em>Note: see <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/305\">DOS attack prevents refunding previous bid in Shortfall.sol and malicious bidder always wins the auction\n</a> for coding details.</em></p>\n<h3 id=\"recommended-mitigation-steps-7\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-7\" aria-label=\"recommended mitigation steps 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Use a withdrawal pattern (“pull over push”) instead of directly refunding the highest bidder during the bid. See: <a href=\"https://fravoll.github.io/solidity-patterns/pull_over_push.html\">https://fravoll.github.io/solidity-patterns/pull_over_push.html</a> for details. This way, the auction will not get into a state of DOS.</p>\n<h3 id=\"assessed-type-5\" style=\"position:relative;\"><a href=\"#assessed-type-5\" aria-label=\"assessed type 5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>DoS</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/376#issuecomment-1560145119\">chechu (Venus) confirmed and commented via duplicate issue #376</a>:</strong></p>\n<blockquote>\n<p>We won’t accept ERC777 tokens as underlying tokens. But we have upgradable ERC20 tokens that can include a similar behavior, so the risk exists and we’ll try to mitigate it by applying some changes.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-08-borrower-can-cause-a-dos-by-frontrunning-a-liquidation-and-repaying-as-low-as-1-wei-of-the-current-debt\" style=\"position:relative;\"><a href=\"#m-08-borrower-can-cause-a-dos-by-frontrunning-a-liquidation-and-repaying-as-low-as-1-wei-of-the-current-debt\" aria-label=\"m 08 borrower can cause a dos by frontrunning a liquidation and repaying as low as 1 wei of the current debt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/255\">[M-08] Borrower can cause a DoS by frontrunning a liquidation and repaying as low as 1 wei of the current debt</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/255\">0xStalin</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/443\">J4de</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/121\">rvierdiiev</a></em>.</p>\n<p>Borrowers can cause DoS when the liquidator attempts to liquidate 100% of the borrower’s position.\nThe borrower needs to frontrun the liquidation tx and repay a slight portion of the debt, paying as low as 1 wei will make the <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L446\">borrowBalance</a> to be less than what it was when the liquidator sent the tx to liquidate the position.</p>\n<h3 id=\"proof-of-concept-8\" style=\"position:relative;\"><a href=\"#proof-of-concept-8\" aria-label=\"proof of concept 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>If a liquidator intends to liquidate the entire position, but the borrower frontruns the liquidator’s transaction and repays an insignificant amount of the total debt, will cause the <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L446\">borrowBalance</a> to be less than it was when the liquidator sent its transaction; thus, will cause the value of the <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L469\">maxClose</a> variable to be less than the <code>repayAmount</code> that the liquidator set to liquidate the whole position, which will end up causing the tx to be reverted because of <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L470-L472\">this validation</a></p>\n<p><strong>Example:</strong></p>\n<ul>\n<li>There is a position of 100 WBNB to be liquidated, the liquidator sends the <code>repayAmount</code> as whatever the <code>maxClose</code> was at that point, the borrower realizes that 100% of its position will be liquidated and then frontruns the liquidation transaction by repaying an insignificant amount of the total borrow.</li>\n<li>When the liquidation transaction is executed, the <code>maxClose</code> will be calculated based on the new <code>borrowBalance</code>, which will cause the calculation of <code>maxClose</code> to be less than the total <code>repayAmount</code> that was sent, and the transaction will be reverted even though the position is still in a liquidation state</li>\n</ul>\n<h3 id=\"recommended-mitigation-steps-8\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-8\" aria-label=\"recommended mitigation steps 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Instead of <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L469-L472\">reverting the tx if the repayAmount is greater than maxClose</a>, recalculate the final <code>repayAmount</code> to be paid during the execution of the liquidation and return this calculated value back to the function that called the <code>preLiquidateHook()</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"18\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">preLiquidateHook</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">repayAmount</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+   ) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\">(</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">repayAmountFinal</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">-   </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">repayAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxClose</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">-      </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">TooMuchRepay</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">-   }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+   </span><span class=\"mtk12\">repayAmountFinal</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">repayAmount</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk12\">maxClose</span><span class=\"mtk1\"> ? </span><span class=\"mtk12\">maxClose</span><span class=\"mtk1\"> : </span><span class=\"mtk12\">repayAmount</span></span></span></code></pre>\n<h3 id=\"assessed-type-6\" style=\"position:relative;\"><a href=\"#assessed-type-6\" aria-label=\"assessed type 6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>DoS</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/255#issuecomment-1560101562\">chechu (Venus) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>Suggestion: Med</p>\n<p>Front running attacks can be easily avoided by the liquidator, connecting to the right nodes and using private mempools. Moreover, the borrower will need to spend gas to defend their position against several liquidators.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/255#issuecomment-1569307574\">0xean (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>I think Med makes sense here, but will be open to warden comments during QA process. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-09-shortfall-contract-might-transfer-an-incorrect-amount-of-tokens-to-the-highest-bidder\" style=\"position:relative;\"><a href=\"#m-09-shortfall-contract-might-transfer-an-incorrect-amount-of-tokens-to-the-highest-bidder\" aria-label=\"m 09 shortfall contract might transfer an incorrect amount of tokens to the highest bidder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/222\">[M-09] ShortFall contract might transfer an incorrect amount of tokens to the highest bidder.</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/222\">fs0c</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/555\">yongskiws</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/548\">BPZ</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/480\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/478\">BPZ</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/468\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/453\">J4de</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/402\">Team_Rocket</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/372\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/366\">rvierdiiev</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/325\">peanuts</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/263\">Brenzee</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/170\">0xnev</a></em>.</p>\n<p>There might be an incorrect amount of transfer possible if <code>convertibleBaseAsset</code> is not a token which is pegged to USD.</p>\n<p>There is not much information on what <code>convertibleBaseAsset</code> is supposed to be. If it is a token which is not pegged to USD, then the auction process might transfer wrong amount of tokens or entirely wrong tokens.</p>\n<p>Let’s take an example of <code>LARGE_RISK_FUND</code> type of auction for simplicity. Assuming the <code>convertibleBaseAsset</code> is not a token pegged to USD (let’s take it as BNB, for this case).</p>\n<p>Now the calculation of <code>poolBadDebt</code> is calculated by converting the <code>badDebt</code> to usd terms in the code below:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"19\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">marketsCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketBadDebt</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">badDebt</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updatePrice</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">usdValue</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\">.</span><span class=\"mtk11\">getUnderlyingPrice</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])) * </span><span class=\"mtk12\">marketBadDebt</span><span class=\"mtk1\">) / </span><span class=\"mtk7\">1e18</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">poolBadDebt</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">poolBadDebt</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">usdValue</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">vTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">marketDebt</span><span class=\"mtk1\">[</span><span class=\"mtk12\">vTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]] = </span><span class=\"mtk12\">marketBadDebt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">marketsDebt</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">marketBadDebt</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span></code></pre>\n<p>In this case, the auction properties would be as follows:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"20\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">seizedRiskFund</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">incentivizedRiskFundBalance</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">startBlock</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">number</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">status</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">AuctionStatus</span><span class=\"mtk1\">.</span><span class=\"mtk12\">STARTED</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">highestBidder</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Where <code>incentivizedRiskFundBalance</code> = <code>poolBadDebt + ((poolBadDebt * incentiveBps) / MAX_BPS);</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"21\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">closeAuction</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Auction</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">auction</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">auctions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">\t\t\t\t</span><span class=\"mtk3\">// ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">auctionType</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">AuctionType</span><span class=\"mtk1\">.</span><span class=\"mtk12\">LARGE_POOL_DEBT</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">riskFundBidAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">seizedRiskFund</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        } </span><span class=\"mtk15\">else</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">riskFundBidAmount</span><span class=\"mtk1\"> = (</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">seizedRiskFund</span><span class=\"mtk1\"> * </span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">highestBidBps</span><span class=\"mtk1\">) / </span><span class=\"mtk12\">MAX_BPS</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">transferredAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">riskFund</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferReserveForAuction</span><span class=\"mtk1\">(</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">riskFundBidAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">convertibleBaseAsset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeTransfer</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">highestBidder</span><span class=\"mtk1\">, </span><span class=\"mtk12\">riskFundBidAmount</span><span class=\"mtk1\">); </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p>When the <code>closeAuction</code>  is called, the contract will transfer the <code>riskFundBidAmount</code> of <code>convertibleBaseAsset</code> to the highest bidder. Here, if the <code>convertibleBaseAsset</code> token is not a token pegged to USD, it will transfer those tokens to the highest bidder, where it should have transferred the tokens that amount to that value.</p>\n<p>Example:</p>\n<ul>\n<li><code>convertibleBaseAsset</code> = TokenA (the price of this token is <code>$</code>100 per 1e18 tokens).</li>\n<li><code>PoolBadDebt</code> = 200 * ie18, which should be equal to <code>$</code>200 as <code>poolbaddebt</code> is calculated in USD.</li>\n<li><code>seizedRiskFund</code> = 220 * 1e18.</li>\n</ul>\n<p>Assume the auction type is <code>LARGE_RISK_FUND</code> and <code>highestBidBps</code> = 10000.</p>\n<p>At the auction complete the tokens transferred to the highestbidder would be:</p>\n<ul>\n<li><code>riskFundBidAmount</code> = 220 * 1e18 * 10000/10000 = 220 * 1e18</li>\n<li>Actual price of tokens transferred to the highestbidder = 220 * 100 = <code>$</code>22000</li>\n<li>Token amount that should be transferred = <code>$</code>220.</li>\n</ul>\n<p>Here, the tokens are directly transferred before converting them into the terms of <code>convertibleBaseAsset</code> which causes the main issue.</p>\n<h3 id=\"recommendation\" style=\"position:relative;\"><a href=\"#recommendation\" aria-label=\"recommendation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Before transferring the amount to the highest bidder, ping the Oracle for the correct price of <code>convertibleBaseAsset</code> and then convert the <code>riskFundBidAmount</code> in the terms of <code>convertibleBaseAsset</code> Tokens. Even if a token pegged to USD is used, the Oracle should be used to get the correct value AND the tokens should always be converted in terms of  <code>convertibleBaseAsset</code>, as sometimes the pegged tokens might also divert from their price or decimals might be different for different tokens.</p>\n<h3 id=\"assessed-type-7\" style=\"position:relative;\"><a href=\"#assessed-type-7\" aria-label=\"assessed type 7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Token-Transfer</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/222#issuecomment-1582200939\">chechu (Venus) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-10-exchange-rate-can-be-manipulated\" style=\"position:relative;\"><a href=\"#m-10-exchange-rate-can-be-manipulated\" aria-label=\"m 10 exchange rate can be manipulated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/220\">[M-10] Exchange Rate can be manipulated</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/220\">LokiThe5th</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/572\">thekmj</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/561\">Parad0x</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/462\">Josiah</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/445\">J4de</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/426\">0x8chars</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/314\">qpzm</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/241\">RaymondFam</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/239\">Cryptor</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/224\">fs0c</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/223\">fs0c</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/202\">QiuhaoLi</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/201\">Norah</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/153\">Co0nan</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/144\">xuwinnie</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/68\">bin2chen</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/31\">volodya</a></em>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/VToken.sol#L1463\">https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/VToken.sol#L1463</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/VToken.sol#L1421\">https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/VToken.sol#L1421</a> <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/VToken.sol#L756\">https://github.com/code-423n4/2023-05-venus/blob/8be784ed9752b80e6f1b8b781e2e6251748d0d7e/contracts/VToken.sol#L756</a></p>\n<p>A malicious user can manipulate the protocol to receive greater rewards from the <code>RewardsDistributor</code> than they should. To achieve this, the attacker manipulates the <code>exchangeRate</code>.</p>\n<p>The attacker <code>mint</code>s into the <code>VToken</code> contract legitimately but also <code>transfer</code>s an amount of tokens directly to the <code>VToken</code> contract. This inflates the <code>exchangeRate</code> for all subsequent users who <code>mint</code> and has the following impact:</p>\n<ol>\n<li>Allows the attacker to push their leverage past the market <code>collateralFactor</code></li>\n<li>Violates the internal accounting when <code>borrowing</code> and <code>repaying</code>, causing the <code>totalBorrows</code> and the sum of the individual account borrows to become out of sync. I.e. the <code>totalBorrows</code> can become <code>0</code> while there are still some loans outstanding, leading to loss of earned interest.</li>\n<li>The attacker can use the leverage to repeatedly <code>borrow</code> + <code>mint</code> into the <code>VToken</code> in order to inflate their share of the token rewards issued by the rewards distributor.</li>\n</ol>\n<p>This means that all subsequent <code>minter</code>s receive less <code>VTokens</code> than they should.</p>\n<p>The attack cost is the loss of the <code>transfer</code> into the <code>VToken</code> contract. But it must be noted that the attacker still receives around 65-75% of the (<code>attackTokens</code> + <code>mintTokens</code>) back.</p>\n<p>The permanent side-effect of this exploit is that the minting of <code>VTokens</code> to any subsequent users remains stunted, as there is no direct mechanism to clear the excess underlying tokens from the contract. This can taint this Pool permanently.</p>\n<p>This exploit becomes more profitable as block count accrues and more <code>REWARD_TOKENS</code> are issued, or, for example, if VENUS sets up greater rewards to incentivize supplying into a particular Pool; these increased rewards are a normal practice in DeFi and could be a prime target for this manipulation.</p>\n<h3 id=\"proof-of-concept-9\" style=\"position:relative;\"><a href=\"#proof-of-concept-9\" aria-label=\"proof of concept 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In this scenario an attacker:</p>\n<ol>\n<li>Needs ~60 underlying tokens (supply 10 underlying, 20 direct transfer, 30 interest).</li>\n<li>Gets ~5 times more rewards than other users.</li>\n<li>Is still able to withdraw ~50 underlying tokens from the <code>VToken</code>.</li>\n<li>~10 tokens are now stuck in the contract, permanently tainting the exchange rate.</li>\n</ol>\n<p>A detailed Proof of Concept illustrating the case can be found in this <a href=\"https://gist.github.com/lokithe5th/cda577cc1b50cb91cfe1d4b1eccecc7e\">gist</a>.</p>\n<p>The gist simulates and walks through the attack using the repo’s test suite as a base.\nThe exploit is commented on throughout its various steps.</p>\n<h3 id=\"tools-used-2\" style=\"position:relative;\"><a href=\"#tools-used-2\" aria-label=\"tools used 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual Code Review.\nHardhat + modified tests from repo.</p>\n<h3 id=\"recommended-mitigation-steps-9\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-9\" aria-label=\"recommended mitigation steps 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>When contract calculations depend on calls to an <code>ERC20.balanceOf</code>, there is always a risk of a malicious user sending tokens directly to the contract to manipulate the calculations to their benefit.</p>\n<p>The simplest solution would be to have a check that the expected amount of underlying is equal to the actual amount of underlying, and if not, have the <code>mint</code> function sweep these additional underlying tokens into the next <code>minter's</code> calculations, reducing the economic incentive and eliminating the exaggerated effect on the exchange rate.</p>\n<h3 id=\"assessed-type-8\" style=\"position:relative;\"><a href=\"#assessed-type-8\" aria-label=\"assessed type 8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Token-Transfer</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/314#issuecomment-1560106779\">chechu (Venus) disputed and commented via duplicate issue #314</a>:</strong></p>\n<blockquote>\n<p>The attack would indeed be feasible if we didn’t require an initial supply.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/314#issuecomment-1569220872\">0xean (judge) commented via duplicate issue #314</a>:</strong></p>\n<blockquote>\n<p>@chechu - can you point me to this in the codebase?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/314#issuecomment-1570021693\">chechu (Venus) commented via duplicate issue #314</a>:</strong></p>\n<blockquote>\n<p>Our fault, we <strong>allow</strong> an initial supply, but we don’t <strong>require</strong> it. <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L321\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L321</a></p>\n<p>The origin of the confusion is that we’ll provide, for sure, an initial supply on every market that we’ll add to the <code>PoolRegistry</code>, and the process to add new markets is under the control of the Governance (so, the community will have to vote for it). For that reason, we really assumed that there will be an initial supply, but now we realized we are not requiring it in the code. We’ll do it, just to avoid any confusion or potential error.</p>\n<p>We won’t integrate the Oracles, but the initial idea is to provide at least <code>$</code>10,000 as an initial supply on each new market. That “check” will be done externally, when the VIP is prepared to be proposed to the community.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/220#issuecomment-1637858904\">chechu (Venus) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<ol>\n<li>Allows the attacker to push their leverage past the market collateralFactor</li>\n</ol>\n</blockquote>\n<p>This is wrong. If you mint (receiving X <code>vTokens</code>) and then you transfer underlying tokens to the market, your X <code>vTokens</code> will have a greater value because the exchange rate is greater after the donation. In the PoC:</p>\n<ol>\n<li>The attacker mints 10 WBTC -> <code>vTokens</code> received: 10</li>\n<li>The attacker donates 20 WBTC -> this change the exchange rate from 1000000000000000000 to 2000000000000000000, so, basically, the <code>vTokens</code> previously minted now can be redeemed receiving the double amount of WBTC (that is the expected effect of this donation).</li>\n</ol>\n<p>So, the value of the 10 <code>vTokens</code> of the attacker after the donation is 20 WBTC, not 10 WBTC. For that reason, the user can borrow 13 WBTC (13 &#x3C; 20 * 0.7, where 0.7 is the collateral factor).</p>\n<p>The attacker could get a similar (actually better) effect minting more <code>vTokens</code> supplying the 20 WBTC tokens, instead of donating them. Moreover, donating is a benefit for every user with <code>vTokens</code> before the donation, while minting only benefits the minter.</p>\n<p>To demonstrate it, you can replace the following statement in the PoC:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"22\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">await mockWBTC.connect(attacker).transfer(vWBTC.address, convertToUnit(20, 8))</span></span></code></pre>\n<p>with this one:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"23\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">await vWBTC.connect(attacker).mint(convertToUnit(20, 8));</span></span></code></pre>\n<p>And the output of the PoC will be the same.</p>\n<blockquote>\n<ol start=\"2\">\n<li>Violates the internal accounting when borrowing and repaying causing the <code>totalBorrows</code> and the sum of the individual account borrows to become out of sync. I.E. the <code>totalBorrows</code> can become 0 while their are still some loans outstanding, leading to loss of earned interest.</li>\n</ol>\n</blockquote>\n<p>This is not because of the transfer (donation), but because of the known rounding issues associated with the used math; which can generate small differences among the <code>totalBorrow</code> variable and the sum of the individual borrowed amounts.</p>\n<blockquote>\n<ol start=\"3\">\n<li>The attacker can use the leverage to repeatedly borrow + mint into the <code>VToken</code> in order to inflate their share of the token rewards issued by the rewards distributor.</li>\n</ol>\n</blockquote>\n<p>That is true, but, again, it’s independent of the donations. Users can use the leverage to increase their positions and therefore get more rewards. The main downside of leveraging is the cost (every X <code>WBTC</code> borrowed that are then supplied implies a cost for the user proportional to the reserve factor of the market). So, taking into account that the total rewards to distribute are fixed, the leverage can make sense depending on the total suppliers and borrowers.</p>\n<blockquote>\n<p>The permanent side-effect of this exploit is that the minting of <code>VTokens</code> to any subsequent users remains stunted as there is no direct mechanism to clear the excess underlying tokens from the contract. This can taint this <code>Pool</code> permanently.</p>\n</blockquote>\n<p>Donations to markets are supported, and there aren’t known negative side effects on regular scenarios. If the liquidity of the market is very low, donations can facilitate issues related to rounding (like in the Hundred Finance attack, <a href=\"https://twitter.com/danielvf/status/1647329491788677121\">https://twitter.com/danielvf/status/1647329491788677121</a>), but every market in Venus starts with a minimum liquidity that should reduce these risks.</p>\n<p>Finally, in the PoC, some redeems operations fail because those users still have some borrowed amount. Printing the error thrown you can see how the error is <code>InsufficientLiquidity</code>, thrown in the <code>Comptroller._checkRedeemAllowed</code> function. To repay 100% of the debt, the best option is to invoke the <code>repayBorrow</code> providing an big amount as parameter. The function will get only the borrowed amount (considering interest accrued until that block).</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/220#issuecomment-1655683997\">thebrittfactor (C4) commented</a>:</strong></p>\n<blockquote>\n<p>Sponsor requested additional feedback from the warden in regards to this submission after the Post-Judging QA period. C4 staff reached out to the warden directly with that request.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/220#issuecomment-1655683997\">LokiThe5th (warden) commented</a>:</strong></p>\n<blockquote>\n<p>Thank you for the feedback. I don’t have access to my original notes anymore, but will try to provide clarity where I can. To be clear, in retrospect, this submission seems to have conflated a few issues while trying to demonstrate the exchange rate issue.</p>\n<blockquote>\n<p>This is wrong. If you mint (receiving X <code>vTokens</code>) and then you transfer underlying tokens to the market, your X <code>vTokens</code> will have a greater value because the exchange rate is greater after the donation. </p>\n</blockquote>\n<p>Yes, you are correct. The exchange rate is manipulated (which is the issue). To be more specific, the attacker <em>appears</em> to be able to push past the collateral factor when <em>considering the amount of <code>vToken</code> held by the attacker</em>. The intention here is to demonstrate this exchange rate manipulation through borrowing past what the internal accounting would hold the attacker’s safe collateral factor would be.</p>\n<blockquote>\n<p>This is not because of the transfer (donation), but because of the known rounding issues associated with the used math; which can generate small differences among the <code>totalBorrow</code> variable and the sum of the individual borrowed amounts.  </p>\n</blockquote>\n<p>Indeed, rounding in Solidity is a known issue. It may well be that the direct transfer only served to exacerbate this issue when compared with the control scenario.</p>\n<blockquote>\n<p>That is true, but, again, it’s independent of the donations. Users can use the leverage to increase their positions and therefore get more rewards. The main downside of leveraging is the cost (every X <code>WBTC</code> borrowed that are then supplied implies a cost for the user proportional to the reserve factor of the market). So, taking into account that the total rewards to distribute are fixed, the leverage can make sense depending on the total suppliers and borrowers.  </p>\n</blockquote>\n<p>You are correct that this is independent of donations. Users using leverage in this way to increase their rewards is likely a separate issue.  </p>\n<blockquote>\n<p>Donations to markets are supported, and there aren’t known negative side effects on regular scenarios. If the liquidity of the market is very low, donations can facilitate issues related to rounding (like in the Hundred Finance attack, <a href=\"https://twitter.com/danielvf/status/1647329491788677121\">https://twitter.com/danielvf/status/1647329491788677121</a>), but every market in Venus starts with a minimum liquidity that should reduce these risks.  </p>\n</blockquote>\n<p>In the context of modular markets exchange rate manipulation can be damaging. It is good practice to explicitly handle (or not handle) donations in the accounting logic for the contract. For example, in the standard <code>UniswapV2Pair</code> contracts calculations are made using an internal tracking of <code>reserves</code> to avoid this issue. </p>\n<blockquote>\n<p>Finally, in the PoC, some redeems operations fail because those users still have some borrowed amount. Printing the error thrown you can see how the error is <code>InsufficientLiquidity</code>, thrown in the <code>Comptroller._checkRedeemAllowed</code> function. To repay 100% of the debt, the best option is to invoke the <code>repayBorrow</code> providing an big amount as parameter. The function will get only the borrowed amount (considering interest accrued until that block).</p>\n</blockquote>\n<p>You are correct. Some redeems fail because some users still have borrowed amounts. In the preceeding code these users tried repay their borrows using their exact <code>borrowBalance</code> from the call to <code>VToken.getAccountSnapshot(user)</code>. It would be acceptable for a user to assume that should they try to <code>repayBorrow</code> with this outstanding amount. If memory serves, this failure of repayment using the returned <code>borrowBalance</code> happened in exchange manipulation scenarios, but not others. But this may have been a mistaken assumption if that is not the case. If so, it would also be a separate issue.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/220#issuecomment-1655688392\">chechu (Venus) commented</a>:</strong></p>\n<blockquote>\n<p>Hey @LokiThe5th - Thanks for your message.</p>\n<blockquote>\n<p>To be more specific, the attacker appears to be able to push past the collateral factor when considering the amount of <code>vToken</code> held by the attacker.</p>\n</blockquote>\n<p>I think that is not precise. The donation doesn’t allow users to break the rule of the collateral factor. The donation is increasing the value of the <code>vTokens</code>, so any user with <code>vTokens</code> before the donation will be able to borrow more tokens. That is correct, expected, and doesn’t generate any issue.</p>\n<p>You call it manipulation, and I can see your point because with a donation the user is able to change the value of the exchange rate. Personally, I don’t think this is a manipulation, because the user doesn’t get any benefit by doing it. As I said, if the attacker mints instead of donating the same amount, he would be able to borrow more tokens (in a regular scenario, not being the first and only supplier).</p>\n<p>Example:</p>\n<ul>\n<li>Initial exchange rate: 1 (1 underlying token == 1 <code>vToken</code>)</li>\n<li>User 1 mints 1,000 tokens, receiving 1,000 <code>vTokens</code>. Exchange rate is not affected, so, it’s 1</li>\n<li>Attacker 1 mints 1,000 tokens, receiving 1,000 <code>vTokens</code>. Exchange rate is not affected, so, it’s 1</li>\n<li>Attacker 1 donates 2,000 tokens, not receiving anything, but changing the exchange rate, that now will be 2 (total cash / total <code>vTokens</code> minted)</li>\n</ul>\n<p>So, now the 1,000 <code>vTokens</code> have more value (the attacker would be able to redeem 1,000 <code>vTokens</code> and receive 2,000 tokens, instead of the original 1,000 tokens they minted). And therefore, the “borrowing power” of the attacker is greater. The attacker can borrow more assets from another market, because now his 1,000 <code>vTokens</code> has more value.</p>\n<p>But, that is a bad strategy by the attacker, because by doing the donation User 1 also received a benefit. Now, User 1 can redeem their 1,000 <code>vTokens</code>, receiving 2,000 tokens. Not only their original 1,000 tokens.</p>\n<p>A better strategy by the attacker would be to mint 2,000 tokens, instead of donating them. This way, the exchange rate doesn’t change (so User 1 doesn’t receive any benefit) and the “borrowing power” of the attacker is even higher (3,000 tokens, instead of 2,000 tokens achieved via the donation).</p>\n<p>So, yes, with a donation you are able to update the exchange rate, but you won’t get any benefit, and you will lose resources.</p>\n<blockquote>\n<p>Indeed, rounding in Solidity is a known issue. It may well be that the direct transfer only served to exacerbate this issue when compared with the control scenario.</p>\n</blockquote>\n<p>If you mint instead of donating, the rounding issue appears too. So, I don’t think the donation exacerbates the rounding issue.</p>\n<blockquote>\n<p>In the context of modular markets exchange rate manipulation can be damaging. It is good practice to explicitly handle (or not handle) donations in the accounting logic for the contract. For example, in the standard <code>UniswapV2Pair</code> contracts calculations are made using an internal tracking of reserves to avoid this issue.</p>\n</blockquote>\n<p>In the Venus protocol, I think donations benefit every <code>vToken</code> holder and don’t affect future holders, because for a user getting <code>vTokens</code>, the relevant events happen from the <code>vTokens</code> are minted until they are redeemed. It doesn’t matter what happened before. Moreover, the exchange rate is never decreasing. So, IMO, we can avoid the internal tracking of cash in the markets.</p>\n<blockquote>\n<p>this failure of repayment using the returned <code>borrowBalance</code> happened in exchange manipulation scenarios, but not others.</p>\n</blockquote>\n<p>I think the failures of repayments are associated with the rounding issues, not with donations. I modified the provided PoC, transforming the donation into a mint, and this issue is still there. I think the impact is low because users are not able to repay 100% of their debt only in edge cases, with 1 or 2 borrowers in the market and after several blocks. With a regular number of borrowers, users shouldn’t have any problem repaying their debt, and therefore redeeming their <code>vTokens</code></p>\n<p>Thank you again for your time reviewing the code. We really appreciate it. Your comments push us to improve the code (and to understand it better, tbh). We are totally open to trying to clarify any doubts.</p>\n</blockquote>\n<hr>\n<h2 id=\"m-11-riskfundswappoolsasset-does-not-allow-the-user-to-supply-deadline-which-may-cause-swap-revert\" style=\"position:relative;\"><a href=\"#m-11-riskfundswappoolsasset-does-not-allow-the-user-to-supply-deadline-which-may-cause-swap-revert\" aria-label=\"m 11 riskfundswappoolsasset does not allow the user to supply deadline which may cause swap revert permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/167\">[M-11] <code>RiskFund.swapPoolsAsset</code> does not allow the user to supply deadline, which may cause swap revert</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/167\">0xnev</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/522\">0xStalin</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/304\">BugBusters</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/233\">chaieth</a></em>.</p>\n<p>Not allowing users to supply their own deadline could potentially expose them to sandwich attacks.</p>\n<h3 id=\"proof-of-concept-10\" style=\"position:relative;\"><a href=\"#proof-of-concept-10\" aria-label=\"proof of concept 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/RiskFund.sol#L174\">RiskFund.sol#L174</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"24\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">swapPoolsAssets</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">markets</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountsOutMin</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[][] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">paths</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">override</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_checkAccessAllowed</span><span class=\"mtk1\">(</span><span class=\"mtk8\">&quot;swapPoolsAssets(address[],uint256[],address[][])&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">poolRegistry</span><span class=\"mtk1\"> != </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk7\">0</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;Risk fund: Invalid pool registry.&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">amountsOutMin</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Risk fund: markets and amountsOutMin are unequal lengths&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">paths</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;Risk fund: markets and paths are unequal lengths&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketsCount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">markets</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">_ensureMaxLoops</span><span class=\"mtk1\">(</span><span class=\"mtk12\">marketsCount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">marketsCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">VToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vToken</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">comptroller</span><span class=\"mtk1\">());</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">PoolRegistry</span><span class=\"mtk1\">.</span><span class=\"mtk12\">VenusPool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">pool</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">PoolRegistry</span><span class=\"mtk1\">(</span><span class=\"mtk12\">poolRegistry</span><span class=\"mtk1\">).</span><span class=\"mtk11\">getPoolByComptroller</span><span class=\"mtk1\">(</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pool</span><span class=\"mtk1\">.</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;comptroller doesn&#39;t exist pool registry&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">Comptroller</span><span class=\"mtk1\">(</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">).</span><span class=\"mtk11\">isMarketListed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;market is not listed&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">swappedTokens</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_swapAsset</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountsOutMin</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">paths</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">poolReserves</span><span class=\"mtk1\">[</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">] = </span><span class=\"mtk12\">poolReserves</span><span class=\"mtk1\">[</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">] + </span><span class=\"mtk12\">swappedTokens</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\"> + </span><span class=\"mtk12\">swappedTokens</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">emit</span><span class=\"mtk1\"> </span><span class=\"mtk11\">SwappedPoolsAssets</span><span class=\"mtk1\">(</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountsOutMin</span><span class=\"mtk1\">, </span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">totalAmount</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p>In <code>RiskFund.swapPoolsAsset</code>, there is a parameter to allow users to supply slippage through <code>amountOutMin</code>, but does not allow the user to include a deadline check when swapping pool assets into base assets, in the event that pool assets are not equal to <code>convertibleBaseAsset</code>.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"25\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">swappedTokens</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">_swapAsset</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">amountsOutMin</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">], </span><span class=\"mtk12\">paths</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">]);</span></span></span></code></pre>\n<p>In <code>RiskFund._swapAsset</code>, there is a call to <code>IPancakeswapV2Router(pancakeSwapRouter).swapExactTokensForTokens()</code>, but the <code>deadline</code> parameter is simply passed in as the current <code>block.timestamp</code>, in which the transaction occurs. This effectively means that the transaction has no deadline, which means that swap transactions may be included anytime by validators and remain pending in mempool, potentially exposing users to sandwich attacks by attackers or MEV bots.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/RiskFund.sol#L265\">RiskFund.sol#L265</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"26\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_swapAsset</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">VToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amountOutMin</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk12\">address</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">path</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">underlyingAsset</span><span class=\"mtk1\"> != </span><span class=\"mtk12\">convertibleBaseAsset</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">path</span><span class=\"mtk1\">[</span><span class=\"mtk7\">0</span><span class=\"mtk1\">] == </span><span class=\"mtk12\">underlyingAsset</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;RiskFund: swap path must start with the underlying asset&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">path</span><span class=\"mtk1\">[</span><span class=\"mtk12\">path</span><span class=\"mtk1\">.</span><span class=\"mtk12\">length</span><span class=\"mtk1\"> - </span><span class=\"mtk7\">1</span><span class=\"mtk1\">] == </span><span class=\"mtk12\">convertibleBaseAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk8\">&quot;RiskFund: finally path must be convertible base asset&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">underlyingAsset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeApprove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pancakeSwapRouter</span><span class=\"mtk1\">, </span><span class=\"mtk7\">0</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk11\">IERC20Upgradeable</span><span class=\"mtk1\">(</span><span class=\"mtk12\">underlyingAsset</span><span class=\"mtk1\">).</span><span class=\"mtk11\">safeApprove</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pancakeSwapRouter</span><span class=\"mtk1\">, </span><span class=\"mtk12\">balanceOfUnderlyingAsset</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">[] </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">amounts</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">IPancakeswapV2Router</span><span class=\"mtk1\">(</span><span class=\"mtk12\">pancakeSwapRouter</span><span class=\"mtk1\">).</span><span class=\"mtk11\">swapExactTokensForTokens</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">balanceOfUnderlyingAsset</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">amountOutMin</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">path</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk4\">this</span><span class=\"mtk1\">),</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk3\">/// @audit does not allow deadline to be passed in by user</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                    </span><span class=\"mtk12\">block</span><span class=\"mtk1\">.</span><span class=\"mtk12\">timestamp</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                );</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                ...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                ...</span></span></span></code></pre>\n<p>Consider the following scenario:</p>\n<ol>\n<li>Alice wants to swap 30 vBNB tokens for 1 BNB and later sell the 1 BNB for 300 DAI. She signs the transaction calling <code>RiskFund.swapPoolsAsset()</code> with inputAmount = 30 vBNB and <code>amountOutmin</code> = 0.99 BNB to allow for 1% slippage.</li>\n<li>The transaction is submitted to the mempool; however, Alice chose a transaction fee that is too low for validators to be interested in including her transaction in a block. The transaction stays pending in the mempool for extended periods, which could be hours, days, weeks, or even longer.</li>\n<li>When the average gas fee dropped far enough for Alice’s transaction to become interesting again for miners to include it, her swap will be executed. In the meantime, the price of BNB could have drastically decreased. She will still at least get 0.99 BNB due to <code>amountOutmin</code>, but the DAI value of that output might be significantly lower. She has unknowingly performed a bad trade due to the pending transaction she forgot about.</li>\n</ol>\n<p>An even worse way this issue can be maliciously exploited is through MEV:</p>\n<ol>\n<li>The swap transaction is still pending in the mempool. Average fees are still too high for validators to be interested in it. The price of BNB has gone up significantly since the transaction was signed, meaning Alice would receive a lot more ETH when the swap is executed. But that also means that her <code>minOutput</code> value is outdated and would allow for significant slippage.</li>\n<li>A MEV bot detects the pending transaction. Since the outdated <code>minOut</code> now allows for high slippage, the bot sandwiches Alice, resulting in significant profit for the bot and significant loss for Alice.</li>\n</ol>\n<h3 id=\"tools-used-3\" style=\"position:relative;\"><a href=\"#tools-used-3\" aria-label=\"tools used 3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>Manual Analysis</p>\n<h3 id=\"recommendation-1\" style=\"position:relative;\"><a href=\"#recommendation-1\" aria-label=\"recommendation 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommendation</h3>\n<p>Allow users to supply their own deadline parameter within <code>RiskFund.swapPoolsAsset</code>.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/167#issuecomment-1560095263\">chechu (Venus) acknowledged</a></strong></p>\n<hr>\n<h2 id=\"m-12-fix-utilization-rate-computation\" style=\"position:relative;\"><a href=\"#m-12-fix-utilization-rate-computation\" aria-label=\"m 12 fix utilization rate computation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/122\">[M-12] Fix utilization rate computation</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/122\">SaeedAlipoor01988</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/159\">lanrebayode77</a></em>.</p>\n<p>The <code>BaseJumpRateModelV2.sol#L131.utilizationRate()</code> function can return a value above 1 and not between [0, BASE].</p>\n<h3 id=\"proof-of-concept-11\" style=\"position:relative;\"><a href=\"#proof-of-concept-11\" aria-label=\"proof of concept 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>In the <code>BaseJumpRateModelV2.sol#L131.utilizationRate()</code> function, cash and borrows and reserves values get used to calculate the utilization rate between [0, 1e18]. Reserves are currently unused but it will be used in the future.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"\" data-index=\"27\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"> */</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">function utilizationRate(</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 cash,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 borrows,</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    uint256 reserves</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">) public pure returns (uint256) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    // Utilization rate is 0 when there are no borrows</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    if (borrows == 0) {</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        return 0;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    }</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    return (borrows * BASE) / (cash + borrows - reserves);</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">}</span></span></code></pre>\n<p>If the borrow value is 0, then the function will return 0, but in this function, the scenario where the value of reserves exceeds cash is not handled. The system does not guarantee that reserves never exceed cash. The reserves grow automatically over time, so it might be difficult to avoid this entirely.</p>\n<p>If reserves > cash (and borrows + cash - reserves > 0), the formula for <code>utilizationRate</code> above gives a utilization rate above 1.</p>\n<h3 id=\"recommended-mitigation-steps-10\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-10\" aria-label=\"recommended mitigation steps 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Make the utilization rate computation return 1 if reserves > cash.</p>\n<h3 id=\"assessed-type-9\" style=\"position:relative;\"><a href=\"#assessed-type-9\" aria-label=\"assessed type 9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Math</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/122#issuecomment-1560092307\">chechu (Venus) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-13-comptrollerhealaccount-doesnt-distribute-rewards-for-a-healed-borrower\" style=\"position:relative;\"><a href=\"#m-13-comptrollerhealaccount-doesnt-distribute-rewards-for-a-healed-borrower\" aria-label=\"m 13 comptrollerhealaccount doesnt distribute rewards for a healed borrower permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/116\">[M-13] Comptroller.healAccount doesn’t distribute rewards for a healed borrower</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/116\">rvierdiiev</a></em>.</p>\n<p>As a result, the healed account receives less rewards.</p>\n<h3 id=\"proof-of-concept-12\" style=\"position:relative;\"><a href=\"#proof-of-concept-12\" aria-label=\"proof of concept 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p><code>Comptroller.healAccount</code> can be called by anyone in order to fully close accounts. The healer should repay part of account’s debt in order to receive all account’s collateral. At the end account debt will be cleared.</p>\n<p>This is the part when collateral is seized and debt is cleared: <br><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L611-L625\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L611-L625</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"28\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">userAssetsCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">VToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">market</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">userAssets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowBalance</span><span class=\"mtk1\">, ) = </span><span class=\"mtk11\">_safeGetAccountSnapshot</span><span class=\"mtk1\">(</span><span class=\"mtk12\">market</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">repaymentAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">mul_ScalarTruncate</span><span class=\"mtk1\">(</span><span class=\"mtk12\">percentage</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrowBalance</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Seize the entire collateral</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">tokens</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">market</span><span class=\"mtk1\">.</span><span class=\"mtk11\">seize</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">tokens</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Repay a certain percentage of the borrow, forgive the rest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">borrowBalance</span><span class=\"mtk1\"> != </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                </span><span class=\"mtk12\">market</span><span class=\"mtk1\">.</span><span class=\"mtk11\">healBorrow</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidator</span><span class=\"mtk1\">, </span><span class=\"mtk12\">user</span><span class=\"mtk1\">, </span><span class=\"mtk12\">repaymentAmount</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span></code></pre>\n<p>In order to seize the collateral, <code>market.seize</code> is called, which will then <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L1104\">call <code>comptroller.preSeizeHook</code></a>. And this hook <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L521-L525\">will distribute supply rewards</a> to both accounts.</p>\n<p>In order to clear, healed account debt <code>market.healBorrow</code> is called. This function <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L390-L429\">will not call any comptroller function</a>. As a result, the debt of the healed account is set to 0, but rewards that were earned by the account before healing were not distributed. So the user lost rewards for that debt amount.</p>\n<h3 id=\"tools-used-4\" style=\"position:relative;\"><a href=\"#tools-used-4\" aria-label=\"tools used 4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools Used</h3>\n<p>VsCode</p>\n<h3 id=\"recommended-mitigation-steps-11\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-11\" aria-label=\"recommended mitigation steps 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p><code>Comptroller</code> should distribute rewards to this account that were earned before and only then set debt to 0.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/116#issuecomment-1552180514\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Will leave open for sponsor comment, I think this would amount to dust given the state of the user’s account. </p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/116#issuecomment-1560090748\">chechu (Venus) confirmed</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/116#issuecomment-1576902911\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>@chechu - can you confirm this has more impact than just dust amounts?</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/116#issuecomment-1582219016\">chechu (Venus) commented</a>:</strong></p>\n<blockquote>\n<blockquote>\n<p>@chechu - can you confirm this has more impact than just dust amounts?</p>\n</blockquote>\n<p>It can be more than dust amounts. I can imagine a user position like this:</p>\n<ul>\n<li>Collateral: <code>$</code>1M (just with one asset)</li>\n<li>Borrow: <code>$</code>500K (healthy, generating a significant amount of borrow rewards if no one interacts with this account for a long time)</li>\n</ul>\n<p>Then, a black swan happens and the collateral value moves from <code>$</code>1M to <code>$</code>20, so anyone could invoke the <code>healAccount</code> function, repaying part (no more than <code>$</code>20) of the loan.</p>\n<p>The current implementation is not distributing the borrow rewards to the borrower, and given the big amount it could be significant. The key point here is, the borrow rewards depend on the loan, not on the collateral (that will be very low, I agree).</p>\n</blockquote>\n<hr>\n<h2 id=\"m-14-placebid-possible-participation-in-auctions-that-have-been-modified\" style=\"position:relative;\"><a href=\"#m-14-placebid-possible-participation-in-auctions-that-have-been-modified\" aria-label=\"m 14 placebid possible participation in auctions that have been modified permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/62\">[M-14] placeBid() Possible participation in auctions that have been modified</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/62\">bin2chen</a></em></p>\n<p><code>placeBid()</code> lacks checking if auctions are restarted and participated in that are not expected by the user, which may result in the user losing funds.</p>\n<h3 id=\"proof-of-concept-13\" style=\"position:relative;\"><a href=\"#proof-of-concept-13\" aria-label=\"proof of concept 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>When the user makes a bid, simply pass in <code>comptroller</code> and <code>bidBps</code> with the following code:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"29\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">placeBid</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidBps</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Auction</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">auction</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">auctions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_isStarted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;no on-going auction&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk11\">_isStale</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;auction is stale, restart it&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bidBps</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">MAX_BPS</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;basis points cannot be more than 10000&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<p>Because <code>comptroller</code> corresponds to the <code>Auction</code> there are two cases that will generate new <code>Auction</code> (the new one and the old one may have completely different types and amounts):</p>\n<ol>\n<li>If the first auction takes too long and no one bids, <code>_isStale()</code> can restart the auction.</li>\n<li>If the auction ends and the last bid time <code>>nextBidderBlockLimit</code>, then you can restart the auction after it ends.</li>\n</ol>\n<p>Since bidding can be restarted, <code>placeBid()</code> is only based on <code>comptroller</code>, and it may be possible to participate in the old <code>Auction</code>, but end up participating in the new <code>Auction</code>; as the old and new <code>Auction</code> may be very different, resulting in the user losing money.</p>\n<p>For example:</p>\n<ol>\n<li>Alice learns about the auction in the UI, auctions = <code>{type=LARGE_RISK_FUND,debt=100,seizedRiskFund=100}</code> and submits it to participate in the auction.</li>\n<li>\n<p>When Alice commits, her transaction will exist in memorypool.</p>\n<p><em>Note: Because Alice needs to stay in the UI interface for some time, or because of the GAS price and block size, Alice’s transaction is delayed, resulting in a much higher possibility of preemptive execution in step 3:</em></p>\n</li>\n<li>\n<p>The auction is restarted due to any of the following situations (before Alice’s task is executed):</p>\n<p>a) Auction <code>>waitForFirstBidder</code> leads to <code>_isStale()</code>. Bob executes restarted auction, restarted auction debt increases. E.g.: auction = <code>{type=LARGE_POOL_DEBT,debt=100000,seizedRiskFund=100}</code>.</p>\n<p>b) The auction ends <code>>nextBidderBlockLimit</code>. Bob restarts the auction, and the restarted auction <code>seizedRiskFund</code> becomes small, like 0, the debt is already very high as\nauction = <code>{type=LARGE_POOL_DEBT,debt=100,seizedRiskFund=0}</code>, there may also be still <code>LARGE_RISK_FUND</code>.</p>\n</li>\n<li>Alice’s turn to execute the transaction, this time the new auction, and Alice expected has been much worse, but the transaction will still be executed. The result is that Alice may pay a lot of debt, but get very little <code>seizedRiskFund</code>.</li>\n</ol>\n<p>So, we need to add a restriction to <code>placeBid()</code> to ensure that the auction has not been restarted when the transaction is executed.</p>\n<p>A simple way to do this is to add the parameter: <code>auctionStartBlock</code>, and compare it to the <code>auction.startBlock</code> of the current transaction. If the two are different, then the auction has been restarted and the transaction reverts.</p>\n<h3 id=\"recommended-mitigation-steps-12\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-12\" aria-label=\"recommended mitigation steps 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"30\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">-   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">placeBid</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidBps</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+   </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">placeBid</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">, </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">bidBps</span><span class=\"mtk1\"> , </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">auctionStartBlock</span><span class=\"mtk1\">) </span><span class=\"mtk11\">external</span><span class=\"mtk1\"> </span><span class=\"mtk11\">nonReentrant</span><span class=\"mtk1\"> {    </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Auction</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">auction</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">auctions</span><span class=\"mtk1\">[</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">+       </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">.</span><span class=\"mtk12\">startBlock</span><span class=\"mtk1\"> == </span><span class=\"mtk12\">auctionStartBlock</span><span class=\"mtk1\">,</span><span class=\"mtk8\">&quot;auction has been restarted&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk11\">_isStarted</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;no on-going auction&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(!</span><span class=\"mtk11\">_isStale</span><span class=\"mtk1\">(</span><span class=\"mtk12\">auction</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;auction is stale, restart it&quot;</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">bidBps</span><span class=\"mtk1\"> &lt;= </span><span class=\"mtk12\">MAX_BPS</span><span class=\"mtk1\">, </span><span class=\"mtk8\">&quot;basis points cannot be more than 10000&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<h3 id=\"assessed-type-10\" style=\"position:relative;\"><a href=\"#assessed-type-10\" aria-label=\"assessed type 10 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Context</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/62#issuecomment-1551611580\">0xean (judge) decreased severity to Medium and commented</a>:</strong></p>\n<blockquote>\n<p>I don’t see this is as being a High, but do follow the wardens logic on why this could be problematic. Will downgrade to Medium and look forward to sponsor comment.</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/62#issuecomment-1560071669\">chechu (Venus) confirmed</a></strong></p>\n<hr>\n<h2 id=\"m-15-borrow-rate-calculation-can-cause-vtokenaccrueinterest-to-revert-dosing-all-major-functionality\" style=\"position:relative;\"><a href=\"#m-15-borrow-rate-calculation-can-cause-vtokenaccrueinterest-to-revert-dosing-all-major-functionality\" aria-label=\"m 15 borrow rate calculation can cause vtokenaccrueinterest to revert dosing all major functionality permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/10\">[M-15] Borrow rate calculation can cause VToken.accrueInterest() to revert, DoSing all major functionality</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/10\">dacian</a>, also found by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/280\">nadin</a>, <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/152\">Co0nan</a> and <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/110\">SaeedAlipoor01988</a></em>.</p>\n<p>Borrow rates are calculated dynamically and <code>VToken.accrueInterest()</code> <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L695-L696\">reverts</a> if the calculated rate is greater than a hard-coded maximum. As <code>accrueInterest()</code> is called by most VToken functions, this state causes a major DoS.</p>\n<h3 id=\"proof-of-concept-14\" style=\"position:relative;\"><a href=\"#proof-of-concept-14\" aria-label=\"proof of concept 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>VToken <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VTokenInterfaces.sol#L53\">hard-codes</a> the maximum borrow rate and <code>accrueInterest()</code> <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L695-L696\">reverts</a> if the dynamically calculated rate is greater than the hard-coded value.</p>\n<p>The actual calculation is dynamic [<a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/BaseJumpRateModelV2.sol#L172-L190\">1</a>, <a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/WhitePaperInterestRateModel.sol#L50-L57\">2</a>] and takes no notice of the hard-coded cap, so it is very possible that this state will manifest, causing a major DoS due to most VToken functions calling <code>accrueInterest()</code> and <code>accrueInterest()</code> reverting.</p>\n<h3 id=\"recommended-mitigation-steps-13\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-13\" aria-label=\"recommended mitigation steps 13 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<p>Change <code>VToken.accrueInterest()</code> to not revert in this case, but simply to set <code>borrowRateMantissa = borrowRateMaxMantissa</code> if the dynamically calculated value would be greater than the hard-coded max. This would:</p>\n<ol>\n<li>Allow execution to continue operating with the system-allowed maximum borrow rate, allowing all functionality that depends upon <code>accrueInterest()</code> to continue as normal.</li>\n<li>Allow <code>borrowRateMantissa</code> to be naturally set to the dynamically calculated rate as soon as that rate becomes less than the hard-coded max.</li>\n</ol>\n<h3 id=\"assessed-type-11\" style=\"position:relative;\"><a href=\"#assessed-type-11\" aria-label=\"assessed type 11 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>DoS</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/10#issuecomment-1560068055\">chechu (Venus) disagreed with severity and commented</a>:</strong></p>\n<blockquote>\n<p>We could deploy a new implementation of the VToken contract, with a higher maximum, and fix the lock. Via VIP, with the votes from the community.</p>\n</blockquote>\n<p> <strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/110#issuecomment-1560087513\">chechu (Venus) confirmed via duplicate issue #110</a></strong></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/10#issuecomment-1569312936\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<p>Upgrading a contract does not mitigate that there would be an impact to the protocol, so I think this does qualify as Medium. </p>\n</blockquote>\n<hr>\n<h2 id=\"m-16-sometimes-calculateborrowerreward-and-calculatesupplierreward-return-incorrect-results\" style=\"position:relative;\"><a href=\"#m-16-sometimes-calculateborrowerreward-and-calculatesupplierreward-return-incorrect-results\" aria-label=\"m 16 sometimes calculateborrowerreward and calculatesupplierreward return incorrect results permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/9\">[M-16] Sometimes calculateBorrowerReward and calculateSupplierReward return incorrect results</a></h2>\n<p><em>Submitted by <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/9\">volodya</a></em></p>\n<p>Sometimes <code>calculateBorrowerReward</code> and <code>calculateSupplierReward</code> return incorrect results.</p>\n<h3 id=\"proof-of-concept-15\" style=\"position:relative;\"><a href=\"#proof-of-concept-15\" aria-label=\"proof of concept 15 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Proof of Concept</h3>\n<p>Whenever a user wants to know pending rewards they call <code>getPendingRewards</code>; sometimes, it returns incorrect results.</p>\n<p>There is a bug inside <code>calculateBorrowerReward</code> and <code>calculateSupplierReward</code></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"31\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">calculateBorrowerReward</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">RewardsDistributor</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardsDistributor</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">RewardTokenState</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowState</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Exp</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketBorrowIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Double</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">mantissa:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowState</span><span class=\"mtk1\">.</span><span class=\"mtk12\">index</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowerIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Double</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">mantissa:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardsDistributor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rewardTokenBorrowerIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//      @audit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//        if (borrowerIndex.mantissa == 0 &amp;&amp; borrowIndex.mantissa &gt;= rewardsDistributor.rewardTokenInitialIndex()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">borrowerIndex</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mantissa</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">borrowIndex</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mantissa</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Covers the case where users borrowed tokens before the market&#39;s borrow state index was set</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">borrowerIndex</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mantissa</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">rewardsDistributor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rewardTokenInitialIndex</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deltaIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">sub_</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrowIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">borrowerIndex</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowerAmount</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">div_</span><span class=\"mtk1\">(</span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">borrowBalanceStored</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">), </span><span class=\"mtk12\">marketBorrowIndex</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowerDelta</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">mul_</span><span class=\"mtk1\">(</span><span class=\"mtk12\">borrowerAmount</span><span class=\"mtk1\">, </span><span class=\"mtk12\">deltaIndex</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrowerDelta</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/9853f6f4fe906b635e214b22de9f627c6a17ba5b/contracts/Lens/PoolLens.sol#L495\">contracts/Lens/PoolLens.sol#L495</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"32\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">calculateSupplierReward</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">RewardsDistributor</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardsDistributor</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplier</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">RewardTokenState</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplyState</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> </span><span class=\"mtk11\">view</span><span class=\"mtk1\"> </span><span class=\"mtk11\">returns</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplyIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Double</span><span class=\"mtk1\">({ </span><span class=\"mtk12\">mantissa:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplyState</span><span class=\"mtk1\">.</span><span class=\"mtk12\">index</span><span class=\"mtk1\"> });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplierIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">Double</span><span class=\"mtk1\">({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">mantissa:</span><span class=\"mtk1\"> </span><span class=\"mtk12\">rewardsDistributor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rewardTokenSupplierIndex</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">supplier</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//      @audit</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk3\">//        if (supplierIndex.mantissa == 0 &amp;&amp; supplyIndex.mantissa  &gt;= rewardsDistributor.rewardTokenInitialIndex()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">supplierIndex</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mantissa</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">supplyIndex</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mantissa</span><span class=\"mtk1\"> &gt; </span><span class=\"mtk7\">0</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Covers the case where users supplied tokens before the market&#39;s supply state index was set</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">supplierIndex</span><span class=\"mtk1\">.</span><span class=\"mtk12\">mantissa</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">rewardsDistributor</span><span class=\"mtk1\">.</span><span class=\"mtk11\">rewardTokenInitialIndex</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Double</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">deltaIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">sub_</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supplyIndex</span><span class=\"mtk1\">, </span><span class=\"mtk12\">supplierIndex</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplierTokens</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">VToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">).</span><span class=\"mtk11\">balanceOf</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supplier</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplierDelta</span><span class=\"mtk1\"> = </span><span class=\"mtk11\">mul_</span><span class=\"mtk1\">(</span><span class=\"mtk12\">supplierTokens</span><span class=\"mtk1\">, </span><span class=\"mtk12\">deltaIndex</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">return</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplierDelta</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/9853f6f4fe906b635e214b22de9f627c6a17ba5b/contracts/Lens/PoolLens.sol#L516\">contracts/Lens/PoolLens.sol#L516</a></p>\n<p>Inside <code>rewardsDistributor</code> original functions are written like this:</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"33\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_distributeSupplierRewardToken</span><span class=\"mtk1\">(</span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">, </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">supplier</span><span class=\"mtk1\">) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">supplierIndex</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">supplyIndex</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">rewardTokenInitialIndex</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Covers the case where users supplied tokens before the market&#39;s supply state index was set.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Rewards the user with REWARD TOKEN accrued from the start of when supplier rewards were first</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// set for the market.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">supplierIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">rewardTokenInitialIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/9853f6f4fe906b635e214b22de9f627c6a17ba5b/contracts/Rewards/RewardsDistributor.sol#L340\">contracts/Rewards/RewardsDistributor.sol#L340</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"34\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk4\">function</span><span class=\"mtk1\"> </span><span class=\"mtk11\">_distributeBorrowerRewardToken</span><span class=\"mtk1\">(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">address</span><span class=\"mtk1\"> </span><span class=\"mtk12\">borrower</span><span class=\"mtk1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk12\">Exp</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">marketBorrowIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) </span><span class=\"mtk11\">internal</span><span class=\"mtk1\"> {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">borrowerIndex</span><span class=\"mtk1\"> == </span><span class=\"mtk7\">0</span><span class=\"mtk1\"> &amp;&amp; </span><span class=\"mtk12\">borrowIndex</span><span class=\"mtk1\"> &gt;= </span><span class=\"mtk12\">rewardTokenInitialIndex</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Covers the case where users borrowed tokens before the market&#39;s borrow state index was set.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// Rewards the user with REWARD TOKEN accrued from the start of when borrower rewards were first</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk3\">// set for the market.</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk12\">borrowerIndex</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">rewardTokenInitialIndex</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">...</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">}</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/9853f6f4fe906b635e214b22de9f627c6a17ba5b/contracts/Rewards/RewardsDistributor.sol#L374\">Rewards/RewardsDistributor.sol#L374</a></p>\n<h3 id=\"recommended-mitigation-steps-14\" style=\"position:relative;\"><a href=\"#recommended-mitigation-steps-14\" aria-label=\"recommended mitigation steps 14 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recommended Mitigation Steps</h3>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"35\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    function calculateSupplierReward(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        address vToken,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        RewardsDistributor rewardsDistributor,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        address supplier,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        RewardTokenState memory supplyState</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) internal view returns (uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Double memory supplyIndex = Double({ mantissa: supplyState.index });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Double memory supplierIndex = Double({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            mantissa: rewardsDistributor.rewardTokenSupplierIndex(vToken, supplier)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if (supplierIndex.mantissa == 0 &amp;&amp; supplyIndex.mantissa &gt; 0) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if (supplierIndex.mantissa == 0 &amp;&amp; supplyIndex.mantissa  &gt;= rewardsDistributor.rewardTokenInitialIndex()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            // Covers the case where users supplied tokens before the market&#39;s supply state index was set</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            supplierIndex.mantissa = rewardsDistributor.rewardTokenInitialIndex();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint256 supplierTokens = VToken(vToken).balanceOf(supplier);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint256 supplierDelta = mul_(supplierTokens, deltaIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        return supplierDelta;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"36\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    function calculateBorrowerReward(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        address vToken,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        RewardsDistributor rewardsDistributor,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        address borrower,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        RewardTokenState memory borrowState,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Exp memory marketBorrowIndex</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    ) internal view returns (uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Double memory borrowIndex = Double({ mantissa: borrowState.index });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Double memory borrowerIndex = Double({</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            mantissa: rewardsDistributor.rewardTokenBorrowerIndex(vToken, borrower)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        if (borrowerIndex.mantissa == 0 &amp;&amp; borrowIndex.mantissa &gt; 0) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        if (borrowerIndex.mantissa == 0 &amp;&amp; borrowIndex.mantissa &gt;= rewardsDistributor.rewardTokenInitialIndex()) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            // Covers the case where users borrowed tokens before the market&#39;s borrow state index was set</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            borrowerIndex.mantissa = rewardsDistributor.rewardTokenInitialIndex();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint256 borrowerAmount = div_(VToken(vToken).borrowBalanceStored(borrower), marketBorrowIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        uint256 borrowerDelta = mul_(borrowerAmount, deltaIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        return borrowerDelta;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    }</span></span></span></code></pre>\n<h3 id=\"assessed-type-12\" style=\"position:relative;\"><a href=\"#assessed-type-12\" aria-label=\"assessed type 12 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Assessed type</h3>\n<p>Invalid Validation</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/9#issuecomment-1560066298\">chechu (Venus) confirmed</a></strong></p>\n<hr>\n<h1 id=\"low-risk-and-non-critical-issues\" style=\"position:relative;\"><a href=\"#low-risk-and-non-critical-issues\" aria-label=\"low risk and non critical issues permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Risk and Non-Critical Issues</h1>\n<p>For this audit, 42 reports were submitted by wardens detailing low risk and non-critical issues. The <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/514\">report highlighted below</a> by <strong>brgltd</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/566\">lfzkoala</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/557\">naman1778</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/547\">0xSmartContract</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/544\">ChrisTina</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/543\">yjrwkk</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/541\">frazerch</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/519\">btk</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/510\">0xkazim</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/490\">fatherOfBlocks</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/488\">Aymen0909</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/487\">Infect3d</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/481\">Cayo</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/474\">Udsen</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/467\">0xAce</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/466\">0x73696d616f</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/460\">berlin-101</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/444\">nadin</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/420\">lukris02</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/406\">PNS</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/396\">tnevler</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/387\">koxuan</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/369\">YoungWolves</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/362\">IceBear</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/333\">Team_Rocket</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/306\">sashik_eth</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/266\">0xWaitress</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/261\">RaymondFam</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/257\">0xnev</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/243\">codeslide</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/237\">wonjun</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/236\">Kose</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/218\">BGSecurity</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/210\">Franfran</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/200\">YakuzaKiawe</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/173\">Bauchibred</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/136\">kodyvim</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/131\">volodya</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/90\">matrix_0wl</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/69\">bin2chen</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/43\">Lilyjjo</a> and\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/33\">Sathish9098</a>.</em></p>\n<h2 id=\"low-issue-summary\" style=\"position:relative;\"><a href=\"#low-issue-summary\" aria-label=\"low issue summary permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Low Issue Summary</h2>\n<table>\n<thead>\n<tr>\n<th>Low</th>\n<th>Issue</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[01]</td>\n<td><code>PoolRegistry.supportMarket()</code> cannot be paused</td>\n</tr>\n<tr>\n<td>[02]</td>\n<td>Lack of revert if price returned from oracle is zero</td>\n</tr>\n<tr>\n<td>[03]</td>\n<td>Solidity version</td>\n</tr>\n<tr>\n<td>[04]</td>\n<td>State update after external calls</td>\n</tr>\n<tr>\n<td>[05]</td>\n<td>Check for stale values on setter functions</td>\n</tr>\n<tr>\n<td>[06]</td>\n<td>Variable shadow</td>\n</tr>\n<tr>\n<td>[07]</td>\n<td>Consistent usage of require vs custom error</td>\n</tr>\n<tr>\n<td>[08]</td>\n<td>Avoid duplicated computation in <code>Comptroller.addRewardsDistributor()</code></td>\n</tr>\n<tr>\n<td>[09]</td>\n<td>Eslint warning in a solidity file</td>\n</tr>\n<tr>\n<td>[10]</td>\n<td>Interchangeable usage of <code>msg.sender</code> and vToken in in <code>Comptroller.preBorrowCheck()</code></td>\n</tr>\n<tr>\n<td>[11]</td>\n<td>Using underscore in a single struct field</td>\n</tr>\n<tr>\n<td>[12]</td>\n<td>Uncommented fields in a struct</td>\n</tr>\n<tr>\n<td>[13]</td>\n<td>Use return named variables or explicit returns consistently</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"01-poolregistrysupportmarket-cannot-be-paused\" style=\"position:relative;\"><a href=\"#01-poolregistrysupportmarket-cannot-be-paused\" aria-label=\"01 poolregistrysupportmarket cannot be paused permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[01] <code>PoolRegistry.supportMarket()</code> cannot be paused</h2>\n<p>Most actions in <code>PoolRegistry</code> can be paused, e.g. <code>_addToMarket()</code>, <code>exitMarket()</code>, <code>preMintHook()</code> etc.</p>\n<p>Consider adding a “support” field in the enum Action and allowing <code>supportMarket()</code> to be paused. Not allowing <code>supportMarket()</code> to be paused could result in irregular behavior if everything else (mint, redeeming, borrowing enter market, exit market, etc) is paused but <code>supportMarket()</code> is open.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L801-L824\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L801-L824</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L1177\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L1177</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L188\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L188</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L254\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L254</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/ComptrollerStorage.sol#L44-L54\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/ComptrollerStorage.sol#L44-L54</a></p>\n<h2 id=\"02-lack-of-revert-if-price-returned-from-oracle-is-zero\" style=\"position:relative;\"><a href=\"#02-lack-of-revert-if-price-returned-from-oracle-is-zero\" aria-label=\"02 lack of revert if price returned from oracle is zero permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[02] Lack of revert if price returned from oracle is zero</h2>\n<p><code>RiskFund._swapAsset()</code> will not revert if <code>getUnderlyingPrice</code> if the price return zero.</p>\n<p>This might be intended to avoid making the loop in <code>RiskFund.swapPoolAssets()</code> revert if a single swap is not done. However, it might be beneficial to revert the entire transaction, since price zero means the price is unavailable.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/RiskFund.sol#L174\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/RiskFund.sol#L174</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/RiskFund.sol#L240-L242\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/RiskFund.sol#L240-L242</a></p>\n<p><a href=\"https://github.com/VenusProtocol/venus-protocol/blob/e085f1194bd942c2e75de5787a0a84ec274c6dd4/contracts/Oracle/PriceOracle.sol#L13\">https://github.com/VenusProtocol/venus-protocol/blob/e085f1194bd942c2e75de5787a0a84ec274c6dd4/contracts/Oracle/PriceOracle.sol#L13</a></p>\n<h2 id=\"03-solidity-version\" style=\"position:relative;\"><a href=\"#03-solidity-version\" aria-label=\"03 solidity version permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[03] Solidity version</h2>\n<p>All contracts are using 0.8.13. Consider updating to the latest version 0.8.19 to ensure the compiler contains the latest security fixes.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L2\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L2</a></p>\n<h2 id=\"04-state-update-after-external-calls\" style=\"position:relative;\"><a href=\"#04-state-update-after-external-calls\" aria-label=\"04 state update after external calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[04] State update after external calls</h2>\n<p>Consider making state updates prior to executing external calls to follow the checks-effects-interactions pattern.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L183\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L183</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L187\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L187</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L190\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L190</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L193\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L193</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L197-L199\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Shortfall/Shortfall.sol#L197-L199</a></p>\n<h2 id=\"05-check-for-stale-values-on-setter-functions\" style=\"position:relative;\"><a href=\"#05-check-for-stale-values-on-setter-functions\" aria-label=\"05 check for stale values on setter functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[05] Check for stale values on setter functions</h2>\n<p>Add a check ensuring that the new value is different than the old value to avoid emitting unnecessary events.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L702-L710\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L702-L710</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L779-L792\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L779-L792</a></p>\n<h2 id=\"06-variable-shadow\" style=\"position:relative;\"><a href=\"#06-variable-shadow\" aria-label=\"06 variable shadow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[06] Variable shadow</h2>\n<p>Consider renaming the input <code>accessControlManager</code> in <code>PoolRegistry.initialize()</code>. Currently, it’s being shadowed by <code>AccessControlledV8.accessControlManager()</code>. This will get a warning on common linters/text editors.</p>\n<p>Also, consider renaming the input “owner” in <code>VToken.allowance()</code> and <code>VToken.balanceOf()</code>, since it’s being shadowed by <code>OwnableUpgradeable.owner()</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L170\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L170</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L539\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L539</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L548\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L548</a></p>\n<h2 id=\"07-consistent-usage-of-require-vs-custom-error\" style=\"position:relative;\"><a href=\"#07-consistent-usage-of-require-vs-custom-error\" aria-label=\"07 consistent usage of require vs custom error permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[07] Consistent usage of require vs custom error</h2>\n<p>Consider using the same approach throughout the codebase to improve the consistency of the code.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L396\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L396</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L489-L490\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/VToken.sol#L489-L490</a></p>\n<h2 id=\"08-avoid-duplicated-computation-in-comptrolleraddrewardsdistributor\" style=\"position:relative;\"><a href=\"#08-avoid-duplicated-computation-in-comptrolleraddrewardsdistributor\" aria-label=\"08 avoid duplicated computation in comptrolleraddrewardsdistributor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[08] Avoid duplicated computation in <code>Comptroller.addRewardsDistributor()</code></h2>\n<p><code>uint256 rewardsDistributorsLen = rewardsDistributors.length;</code> can be removed and the <code>rewardsDistributorsLength</code> from L930 can be reused.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L940\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L940</a></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L930\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L930</a></p>\n<h2 id=\"09-eslint-warning-in-a-solidity-file\" style=\"position:relative;\"><a href=\"#09-eslint-warning-in-a-solidity-file\" aria-label=\"09 eslint warning in a solidity file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[09] Eslint warning in a solidity file</h2>\n<p>The comment on <code>Comptroller.preBorrowHook()</code> seems to have been intended for a js/ts test file. </p>\n<p>Consider removing it from the solidity source code or add a comment on why it needs to be there.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L323\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L323</a></p>\n<h2 id=\"10-interchangeable-usage-of-msgsender-and-vtoken-in-in-comptrollerpreborrowcheck\" style=\"position:relative;\"><a href=\"#10-interchangeable-usage-of-msgsender-and-vtoken-in-in-comptrollerpreborrowcheck\" aria-label=\"10 interchangeable usage of msgsender and vtoken in in comptrollerpreborrowcheck permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[10] Interchangeable usage of <code>msg.sender</code> and <code>vToken</code> in in <code>Comptroller.preBorrowCheck()</code></h2>\n<p>Consider replacing <code>_addToMarket(VToken(msg.sender), borrower)</code> with <code>_addToMarket(VToken(vToken), borrower)</code>, since <code>msg.sender</code> will have to be equal <code>vToken</code> for <code>_checkSender(vToken)</code> to pass. This can improve code clarity.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L339-L342\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L339-L342</a></p>\n<h2 id=\"11-using-underscore-in-a-single-struct-field\" style=\"position:relative;\"><a href=\"#11-using-underscore-in-a-single-struct-field\" aria-label=\"11 using underscore in a single struct field permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[11] Using underscore in a single struct field</h2>\n<p>Consider refactoring <code>kink_</code> to <code>kink</code>.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L43\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L43</a></p>\n<h2 id=\"12-uncommented-fields-in-a-struct\" style=\"position:relative;\"><a href=\"#12-uncommented-fields-in-a-struct\" aria-label=\"12 uncommented fields in a struct permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[12] Uncommented fields in a struct</h2>\n<p>Consider adding comments for all the fields in a struct to improve the readability of the codebase.</p>\n<p>Example with comments:</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/ComptrollerStorage.sol#L29-L42\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/ComptrollerStorage.sol#L29-L42</a></p>\n<p>Example without comments:</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/ComptrollerStorage.sol#L8-L27\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/ComptrollerStorage.sol#L8-L27</a></p>\n<h2 id=\"13-use-return-named-variables-or-explicit-returns-consistently\" style=\"position:relative;\"><a href=\"#13-use-return-named-variables-or-explicit-returns-consistently\" aria-label=\"13 use return named variables or explicit returns consistently permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[13] Use return named variables or explicit returns consistently</h2>\n<p>Some functions are declaring returned named variables on the function header, while other functions are not defining returned named variables.</p>\n<p>The following function does not declare a returned named variable:</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L379\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L379</a></p>\n<p>The following function is using a return named variable in the function header:</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L222\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L222</a></p>\n<p>Consider adopting the same approach throughout the codebase to improve the explicitness and readability of the code.</p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/514#issuecomment-1560159004\">chechu (Venus) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>01: Confirm<br>\n02: Confirm<br>\n03: Acknowledge<br>\n04: Confirm<br>\n05: Confirm<br>\n06: Confirm<br>\n07: Confirm<br>\n08: Confirm<br>\n09: Confirm<br>\n10: Confirm<br>\n11: Confirm<br>\n12: Confirm<br>\n13: Confirm</p>\n</blockquote>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/514#issuecomment-1576943935\">0xean (judge) commented</a>:</strong></p>\n<blockquote>\n<ol>\n<li>Non-Critical</li>\n<li>Low</li>\n<li>Non-Critical</li>\n<li>Low</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n<li>Non-Critical</li>\n</ol>\n</blockquote>\n<hr>\n<h1 id=\"gas-optimizations\" style=\"position:relative;\"><a href=\"#gas-optimizations\" aria-label=\"gas optimizations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h1>\n<p>For this audit, 27 reports were submitted by wardens detailing gas optimizations. The <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/538\">report highlighted below</a> by <strong>JCN</strong> received the top score from the judge.</p>\n<p><em>The following wardens also submitted reports: <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/564\">petrichor</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/554\">0xSmartContract</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/539\">SM3_SS</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/537\">naman1778</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/529\">Raihan</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/509\">c3phas</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/492\">fatherOfBlocks</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/485\">hunter_w3b</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/484\">Aymen0909</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/483\">pontifex</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/475\">Udsen</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/465\">0xAce</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/440\">lllu_23</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/423\">descharre</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/379\">ReyAdmirado</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/368\">j4ld1na</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/334\">Team_Rocket</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/242\">codeslide</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/216\">SAAJ</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/214\">Rageur</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/127\">wahedtalash77</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/93\">matrix_0wl</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/70\">rapha</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/56\">K42</a>,\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/37\">souilos</a> and\n<a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/34\">Sathish9098</a>.</em></p>\n<h2 id=\"summary-1\" style=\"position:relative;\"><a href=\"#summary-1\" aria-label=\"summary 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<p>A majority of the optimizations were benchmarked via the protocol’s tests, i.e. using the following config: <code>solc version 0.8.13</code>, <code>optimizer on</code>, and <code>200 runs</code>. Optimizations that were not benchmarked are explained via EVM gas costs and opcodes.</p>\n<p>Below are the overall average gas savings for the following tested functions, with all the optimizations applied:\n| Function |    Before   |    After   | Avg Gas Savings |\n| ------ | -------- | -------- | ------- |\n| ERC20.decreaseAllowance |  36685  |  36615  | 70 |\n| ERC20.increaseAllowance |  36636  |  36560  | 76 |\n| ERC20.transfer |  146501  |  145334  | 1167 |\n| ERC20.transferFrom |  92902  |  92435  | 467 |\n| Comptroller.addRewardsDistributor |  175094  |  174683  | 411 |\n| Comptroller.enterMarkets |  132444  |  132238  | 206 |\n| Comptroller.exitMarket |  69698  |  67959  | 1739 |\n| Comptroller.healAccount |  223131  |  218001  | 5130 |\n| Comptroller.liquidateAccount |  233098  |  223536  | 9562 |\n| Comptroller.preBorrowHook |  102587  |  100579  | 2008 |\n| Comptroller.supportMarket |  103153  |  98338  | 4815 |\n| PoolRegistry.addMarket |  1378668  |  1334768  | 43900 |\n| PoolRegistry.createRegistryPool |  664419  |  618956  | 45463 |\n| PoolRegistry.updatePoolMetadata |  115095  |  114348  | 747 |\n| ProtocolShareReserve.releaseFunds |  172312  |  171992  | 320 |\n| ProtocolShareReserve.updateAssetsState |  89962  |  89816  | 146 |\n| RewardsDistributor.claimRewardToken |  276621  |  276519  | 102 |\n| RewardsDistributor.setRewardTokenSpeeds |  208377  |  207399  | 978 |\n| RiskFund.swapPoolsAssets |  366040  |  357571  | 8469 |\n| Shortfall.closeAuction |  191937  |  188607  | 3330 |\n| Shortfall.placeBid |  185429  |  183262  | 2167 |\n| Shortfall.restartAuction |  114761  |  114056  | 705 |\n| Shortfall.startAuction |  285153  |  284579  | 574 |\n| VToken.borrow |  323336  |  319410  | 3926 |\n| VToken.liquidateBorrow |  293130  |  285753  | 7377 |\n| VToken.mint |  155902  |  153899  | 2003 |\n| VToken.redeem |  184107  |  182396  | 1711 |\n| VToken.reduceReserves |  184956  |  184375  | 581 |\n| VToken.repayBorrow |  137882  |  136740  | 1142 | </p>\n<p><strong>Total gas saved across all listed functions: 149292</strong></p>\n<p><em>Notes</em>: </p>\n<ul>\n<li>The <a href=\"#gasreport-output-with-all-optimizations-applied\">Gas report</a> output, after all optimizations have been applied, can be found at the end of the report.</li>\n<li>The final diffs for each contract, with all the optimizations applied, can be found <a href=\"https://gist.github.com/0xJCN/403d8b821361aac8d809c263b0784657\">here</a>.</li>\n</ul>\n<h2 id=\"gas-optimizations-1\" style=\"position:relative;\"><a href=\"#gas-optimizations-1\" aria-label=\"gas optimizations 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gas Optimizations</h2>\n<table>\n<thead>\n<tr>\n<th>Number</th>\n<th align=\"left\">Issue</th>\n<th align=\"center\">Instances</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[G-01]</td>\n<td align=\"left\">State variables only set in the constructor should be declared immutable</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[G-02]</td>\n<td align=\"left\">State variables can be packed to use fewer storage slots</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td>[G-03]</td>\n<td align=\"left\">Structs can be packed to use fewer storage slots</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>[G-04]</td>\n<td align=\"left\">State variables can be cached instead of re-reading them from storage</td>\n<td align=\"center\">40</td>\n</tr>\n<tr>\n<td>[G-05]</td>\n<td align=\"left\">Cache state variables outside of loop to avoid reading storage on every iteration</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G-06]</td>\n<td align=\"left\">Avoid emitting storage values</td>\n<td align=\"center\">9</td>\n</tr>\n<tr>\n<td>[G-07]</td>\n<td align=\"left\">Use calldata instead of memory for function arguments that do not get mutate</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>[G-08]</td>\n<td align=\"left\">Refactor internal function to avoid unnecessary SLOAD</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td>[G-09]</td>\n<td align=\"left\">Return values from external calls can be cached to avoid unnecessary call</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G-10]</td>\n<td align=\"left\">A mapping is more efficient than an array</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td>[G-11]</td>\n<td align=\"left\">Move storage pointer to top of function to avoid offset calculation</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[G-12]</td>\n<td align=\"left\">Move calldata pointer to top of for loop to avoid offset calculations</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[G-13]</td>\n<td align=\"left\">Using storage instead of memory for structs/arrays saves gas</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td>[G-14]</td>\n<td align=\"left\">Multiple accesses of a mapping/array should use a storage pointer</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td>[G-15]</td>\n<td align=\"left\">Use <code>do while</code> loops instead of for loops</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td>[G-16]</td>\n<td align=\"left\">Use assembly to perform efficient back-to-back calls</td>\n<td align=\"center\">1</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"g-01-state-variables-only-set-in-the-constructor-should-be-declared-immutable\" style=\"position:relative;\"><a href=\"#g-01-state-variables-only-set-in-the-constructor-should-be-declared-immutable\" aria-label=\"g 01 state variables only set in the constructor should be declared immutable permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-01] State variables only set in the constructor should be declared immutable</h2>\n<p>The solidity compiler will directly embed the values of immutable variables into your contract bytecode and therefore will save you from incurring a <code>Gsset (20000 gas)</code> when you set storage variables in the constructor; a <code>Gcoldsload (2100 gas)</code> when you access storage variables for the first time in a transaction, and a <code>Gwarmaccess (100 gas)</code> for each subsequent access to that storage slot.</p>\n<p>Total Instances: <code>1</code></p>\n<p>Estimated Gas Saved: <code>1 * 2100 = 2100</code></p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/BaseJumpRateModelV2.sol#L18\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/BaseJumpRateModelV2.sol#L18</a></p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"37\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">BaseJumpRateModelV2</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">18</span><span class=\"mtk1\">:    </span><span class=\"mtk12\">IAccessControlManagerV8</span><span class=\"mtk1\"> </span><span class=\"mtk12\">public</span><span class=\"mtk1\"> </span><span class=\"mtk12\">accessControlManager</span><span class=\"mtk1\">;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">```diff</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">diff --git a/contracts/BaseJumpRateModelV2.sol b/contracts/BaseJumpRateModelV2.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">index 68b535a..bd83624 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">--- a/contracts/BaseJumpRateModelV2.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">+++ b/contracts/BaseJumpRateModelV2.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">@@ -15,7 +15,7 @@ abstract contract BaseJumpRateModelV2 is InterestRateModel {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">     /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">      * @notice The address of the AccessControlManager contract</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-    IAccessControlManagerV8 public accessControlManager;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">+    IAccessControlManagerV8 public immutable accessControlManager;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">     /**</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">      * @notice The approximate number of blocks per year that is assumed by the interest rate model</span></span></span></code></pre>\n<h2 id=\"g-02-state-variables-can-be-packed-to-use-fewer-storage-slots\" style=\"position:relative;\"><a href=\"#g-02-state-variables-can-be-packed-to-use-fewer-storage-slots\" aria-label=\"g 02 state variables can be packed to use fewer storage slots permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-02] State variables can be packed to use fewer storage slots</h2>\n<p>The EVM works with 32 byte words. Variables less than 32 bytes can be declared next to each other in storage and this will pack the values together into a single 32 byte storage slot (if the values combined are &#x3C;= 32 bytes). If the variables packed together are retrieved together in functions we will effectively save ~2000 gas with every subsequent SLOAD for that storage slot. This is due to us incurring a Gwarmaccess (100 gas) versus a Gcoldsload (2100 gas).</p>\n<p><em>There are 6 instances of this issue. (For in-depth details on this and all further gas optimizations with multiple instances, please see the warden’s <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/538\">full report</a>.)</em></p>\n<h2 id=\"g-03-structs-can-be-packed-to-use-fewer-storage-slots\" style=\"position:relative;\"><a href=\"#g-03-structs-can-be-packed-to-use-fewer-storage-slots\" aria-label=\"g 03 structs can be packed to use fewer storage slots permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-03] Structs can be packed to use fewer storage slots</h2>\n<p>The EVM works with 32 byte words. Variables less than 32 bytes can be declared next to each other in storage and this will pack the values together into a single 32 byte storage slot (if values combined are &#x3C;= 32 bytes). If the variables packed together are retrieved together in functions (more likely with structs) we will effectively save ~2000 gas with every subsequent SLOAD for that storage slot. This is due to us incurring a Gwarmaccess (100 gas) versus a Gcoldsload (2100 gas).</p>\n<p><em>There are 3 instances of this issue.</em></p>\n<h2 id=\"g-04-state-variables-can-be-cached-instead-of-re-reading-them-from-storage\" style=\"position:relative;\"><a href=\"#g-04-state-variables-can-be-cached-instead-of-re-reading-them-from-storage\" aria-label=\"g 04 state variables can be cached instead of re reading them from storage permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-04] State variables can be cached instead of re-reading them from storage</h2>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/ReserveHelpers.sol#L60-L66\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/RiskFund/ReserveHelpers.sol#L60-L66</a></p>\n<p><em>There are 40 instances of this issue.</em></p>\n<h2 id=\"g-05-cache-state-variables-outside-of-loop-to-avoid-reading-storage-on-every-iteration\" style=\"position:relative;\"><a href=\"#g-05-cache-state-variables-outside-of-loop-to-avoid-reading-storage-on-every-iteration\" aria-label=\"g 05 cache state variables outside of loop to avoid reading storage on every iteration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-05] Cache state variables outside of loop to avoid reading storage on every iteration</h2>\n<p>Reading from storage should always try to be avoided within loops. In the following instances, we are able to cache state variables outside of the loop to save a <code>Gwarmaccess (100 gas)</code> per loop iteration.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Rewards/RewardsDistributor.sol#L282-L284\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Rewards/RewardsDistributor.sol#L282-L284</a></p>\n<p>Gas Savings for <code>RewardsDistributor.claimRewardToken</code>, obtained via protocol’s tests: Avg 77 gas.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Min</th>\n<th>Max</th>\n<th>Avg</th>\n<th># calls</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before</td>\n<td>262655</td>\n<td>291169</td>\n<td>276621</td>\n<td>3</td>\n</tr>\n<tr>\n<td>After</td>\n<td>262578</td>\n<td>291092</td>\n<td>276544</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"38\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Rewards</span><span class=\"mtk1\">/</span><span class=\"mtk12\">RewardsDistributor</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">282</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">vTokensCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">283</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">VToken</span><span class=\"mtk1\"> </span><span class=\"mtk12\">vToken</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">vTokens</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">284</span><span class=\"mtk1\">:            </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isMarketListed</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">), </span><span class=\"mtk8\">&quot;market must be listed&quot;</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"39\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/Rewards/RewardsDistributor.sol b/contracts/Rewards/RewardsDistributor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 434732d..1b92e43 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/Rewards/RewardsDistributor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/Rewards/RewardsDistributor.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -278,10 +278,11 @@ contract RewardsDistributor is ExponentialNoError, Ownable2StepUpgradeable, Acce</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 vTokensCount = vTokens.length;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         _ensureMaxLoops(vTokensCount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        Comptroller _comptroller = comptroller;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         for (uint256 i; i &lt; vTokensCount; ++i) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             VToken vToken = vTokens[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            require(comptroller.isMarketListed(vToken), &quot;market must be listed&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            require(_comptroller.isMarketListed(vToken), &quot;market must be listed&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             Exp memory borrowIndex = Exp({ mantissa: vToken.borrowIndex() });</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             _updateRewardTokenBorrowIndex(address(vToken), borrowIndex);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             _distributeBorrowerRewardToken(address(vToken), holder, borrowIndex);</span></span></span></code></pre>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L584-L586\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L584-L586</a></p>\n<p>Gas Savings for <code>Comptroller.healAccount</code>, obtained via protocol’s tests: Avg 181 gas.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Min</th>\n<th>Max</th>\n<th>Avg</th>\n<th># calls</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before</td>\n<td>84584</td>\n<td>331091</td>\n<td>223131</td>\n<td>10</td>\n</tr>\n<tr>\n<td>After</td>\n<td>84324</td>\n<td>330963</td>\n<td>222950</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"cache-oracle-outside-loop-to-save-1-sload-per-iteration\" style=\"position:relative;\"><a href=\"#cache-oracle-outside-loop-to-save-1-sload-per-iteration\" aria-label=\"cache oracle outside loop to save 1 sload per iteration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cache <code>oracle</code> outside loop to save 1 SLOAD per iteration.</h3>\n<p><strong>Note:</strong> We must remove cached <code>msg.sender</code> variable to fix <code>stack too deep</code> error.</p>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"40\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Comptroller</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">584</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">userAssetsCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">585</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">userAssets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk11\">accrueInterest</span><span class=\"mtk1\">();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">586</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">oracle</span><span class=\"mtk1\">.</span><span class=\"mtk11\">updatePrice</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">userAssets</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">])); </span><span class=\"mtk3\">// @audit: sload on every iteration</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"41\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/Comptroller.sol b/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 41dc518..8ae7709 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -579,12 +579,13 @@ contract Comptroller is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         VToken[] memory userAssets = accountAssets[user];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 userAssetsCount = userAssets.length;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        address liquidator = msg.sender;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // We need all user&#39;s markets to be fresh for the computations to be correct</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        PriceOracle _oracle = oracle;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         for (uint256 i; i &lt; userAssetsCount; ++i) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             userAssets[i].accrueInterest();</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            oracle.updatePrice(address(userAssets[i]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            _oracle.updatePrice(address(userAssets[i]));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         AccountLiquiditySnapshot memory snapshot = _getCurrentLiquiditySnapshot(user, _getLiquidationThreshold);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -616,11 +617,11 @@ contract Comptroller is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             // Seize the entire collateral</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             if (tokens != 0) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                market.seize(liquidator, user, tokens);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                market.seize(msg.sender, user, tokens);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             // Repay a certain percentage of the borrow, forgive the rest</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             if (borrowBalance != 0) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                market.healBorrow(liquidator, user, repaymentAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                market.healBorrow(msg.sender, user, repaymentAmount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     }</span></span></span></code></pre>\n<h2 id=\"g-06-avoid-emitting-storage-values\" style=\"position:relative;\"><a href=\"#g-06-avoid-emitting-storage-values\" aria-label=\"g 06 avoid emitting storage values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-06] Avoid emitting storage values</h2>\n<p>Caching of a state variable replaces each <code>Gwarmaccess (100 gas)</code> with a much cheaper stack read. We can avoid unnecessary SLOADs by caching storage values that were previously accessed and emitting those cached values.</p>\n<p><em>There are 9 instances of this issue.</em></p>\n<h2 id=\"g-07-use-calldata-instead-of-memory-for-function-arguments-that-do-not-get-mutated\" style=\"position:relative;\"><a href=\"#g-07-use-calldata-instead-of-memory-for-function-arguments-that-do-not-get-mutated\" aria-label=\"g 07 use calldata instead of memory for function arguments that do not get mutated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-07] Use calldata instead of memory for function arguments that do not get mutated</h2>\n<p>When you specify a data location as memory, that value will be copied into memory. When you specify the location as calldata, the value will stay static within calldata. If the value is a large, complex type, using memory may result in extra memory expansion costs.</p>\n<p><em>There are 3 instances of this issue.</em></p>\n<h2 id=\"g-08-refactor-internal-function-to-avoid-unnecessary-sload\" style=\"position:relative;\"><a href=\"#g-08-refactor-internal-function-to-avoid-unnecessary-sload\" aria-label=\"g 08 refactor internal function to avoid unnecessary sload permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-08] Refactor internal function to avoid unnecessary SLOAD</h2>\n<p>The internal functions below read storage slots that are previously read in the functions that invoke them. We can refactor the internal functions so we could pass cached storage variables as stack variables and avoid the extra storage reads, which would otherwise take place in the internal functions.</p>\n<p><em>There are 3 instances of this issue.</em></p>\n<h2 id=\"g-09-return-values-from-external-calls-can-be-cached-to-avoid-unnecessary-call\" style=\"position:relative;\"><a href=\"#g-09-return-values-from-external-calls-can-be-cached-to-avoid-unnecessary-call\" aria-label=\"g 09 return values from external calls can be cached to avoid unnecessary call permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-09] Return values from external calls can be cached to avoid unnecessary call</h2>\n<p>External calls are expensive as they use the <code>STATICCALL</code>/<code>CALL</code> opcode (~100 gas). If you are calling the same external function more than once you should cache the return value to avoid an unnecessary <code>STATICCALL</code>/<code>CALL</code>.</p>\n<p><em>There are 2 instances of this issue.</em></p>\n<h2 id=\"g-10-a-mapping-is-more-efficient-than-an-array\" style=\"position:relative;\"><a href=\"#g-10-a-mapping-is-more-efficient-than-an-array\" aria-label=\"g 10 a mapping is more efficient than an array permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-10] A mapping is more efficient than an array</h2>\n<p>Fetching data from an array is more expensive than fetching data from a mapping. Fetching data from an array will require iterating over the array until you reach your desired data. When using a mapping you only need to know the key in order to fetch the data from the exact slot it is stored in. <a href=\"https://twitter.com/pcaversaccio/status/1464523336730480640\">Source</a></p>\n<p><em>There are 2 instances of this issue.</em></p>\n<h2 id=\"g-11-move-storage-pointer-to-top-of-function-to-avoid-offset-calculation\" style=\"position:relative;\"><a href=\"#g-11-move-storage-pointer-to-top-of-function-to-avoid-offset-calculation\" aria-label=\"g 11 move storage pointer to top of function to avoid offset calculation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-11] Move storage pointer to top of function to avoid offset calculation</h2>\n<p>We can avoid unnecessary offset calculations by moving the storage pointer to the top of the function.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L804-L810\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L804-L810</a></p>\n<p>Gas Savings for <code>Comptroller.supportMarket</code>, obtained via protocol’s tests: Avg 89 gas.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Min</th>\n<th>Max</th>\n<th>Avg</th>\n<th># calls</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before</td>\n<td>94253</td>\n<td>108914</td>\n<td>103153</td>\n<td>25</td>\n</tr>\n<tr>\n<td>After</td>\n<td>94175</td>\n<td>108824</td>\n<td>103064</td>\n<td>25</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"42\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Comptroller</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">804</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">)].</span><span class=\"mtk12\">isListed</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">805</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MarketAlreadyListed</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">806</span><span class=\"mtk1\">:        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">807</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">808</span><span class=\"mtk1\">:        </span><span class=\"mtk11\">require</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">.</span><span class=\"mtk11\">isVToken</span><span class=\"mtk1\">(), </span><span class=\"mtk8\">&quot;Comptroller: Invalid vToken&quot;</span><span class=\"mtk1\">); </span><span class=\"mtk3\">// Sanity check to make sure its really a VToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">809</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">810</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">Market</span><span class=\"mtk1\"> </span><span class=\"mtk12\">storage</span><span class=\"mtk1\"> </span><span class=\"mtk12\">newMarket</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">vToken</span><span class=\"mtk1\">)];</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"43\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/Comptroller.sol b/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 41dc518..ad41791 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -801,13 +801,13 @@ contract Comptroller is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function supportMarket(VToken vToken) external {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         _checkSenderIs(poolRegistry);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        Market storage newMarket = markets[address(vToken)];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         if (markets[address(vToken)].isListed) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             revert MarketAlreadyListed(address(vToken));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(vToken.isVToken(), &quot;Comptroller: Invalid vToken&quot;); // Sanity check to make sure its really a VToken</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        Market storage newMarket = markets[address(vToken)];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         newMarket.isListed = true;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         newMarket.collateralFactorMantissa = 0;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         newMarket.liquidationThresholdMantissa = 0;</span></span></span></code></pre>\n<h2 id=\"g-12-move-calldata-pointer-to-top-of-for-loop-to-avoid-offset-calculations\" style=\"position:relative;\"><a href=\"#g-12-move-calldata-pointer-to-top-of-for-loop-to-avoid-offset-calculations\" aria-label=\"g 12 move calldata pointer to top of for loop to avoid offset calculations permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-12] Move calldata pointer to top of for loop to avoid offset calculations</h2>\n<p>We can avoid unnecessary offset calculations by moving the calldata pointer to the top of the for loop.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L669-L677\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Comptroller.sol#L669-L677</a></p>\n<p>Gas Savings for <code>Comptroller.liquidateAccount</code>, obtained via protocol’s tests: Avg 194 gas.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Min</th>\n<th>Max</th>\n<th>Avg</th>\n<th># calls</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before</td>\n<td>91420</td>\n<td>373370</td>\n<td>233098</td>\n<td>4</td>\n</tr>\n<tr>\n<td>After</td>\n<td>91198</td>\n<td>373259</td>\n<td>232904</td>\n<td>4</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"44\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Comptroller</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">669</span><span class=\"mtk1\">:        </span><span class=\"mtk15\">for</span><span class=\"mtk1\"> (</span><span class=\"mtk12\">uint256</span><span class=\"mtk1\"> </span><span class=\"mtk12\">i</span><span class=\"mtk1\">; </span><span class=\"mtk12\">i</span><span class=\"mtk1\"> &lt; </span><span class=\"mtk12\">ordersCount</span><span class=\"mtk1\">; ++</span><span class=\"mtk12\">i</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">670</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">)].</span><span class=\"mtk12\">isListed</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">671</span><span class=\"mtk1\">:                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MarketNotListed</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">vTokenBorrowed</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">672</span><span class=\"mtk1\">:            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">673</span><span class=\"mtk1\">:            </span><span class=\"mtk15\">if</span><span class=\"mtk1\"> (!</span><span class=\"mtk12\">markets</span><span class=\"mtk1\">[</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">)].</span><span class=\"mtk12\">isListed</span><span class=\"mtk1\">) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">674</span><span class=\"mtk1\">:                </span><span class=\"mtk12\">revert</span><span class=\"mtk1\"> </span><span class=\"mtk11\">MarketNotListed</span><span class=\"mtk1\">(</span><span class=\"mtk11\">address</span><span class=\"mtk1\">(</span><span class=\"mtk12\">orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">].</span><span class=\"mtk12\">vTokenCollateral</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">675</span><span class=\"mtk1\">:            }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">676</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">677</span><span class=\"mtk1\">:            </span><span class=\"mtk12\">LiquidationOrder</span><span class=\"mtk1\"> </span><span class=\"mtk12\">calldata</span><span class=\"mtk1\"> </span><span class=\"mtk12\">order</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">orders</span><span class=\"mtk1\">[</span><span class=\"mtk12\">i</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"45\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/Comptroller.sol b/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 41dc518..2c0abc9 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/Comptroller.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -667,14 +667,14 @@ contract Comptroller is</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         _ensureMaxLoops(ordersCount);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         for (uint256 i; i &lt; ordersCount; ++i) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            if (!markets[address(orders[i].vTokenBorrowed)].isListed) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                revert MarketNotListed(address(orders[i].vTokenBorrowed));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            LiquidationOrder calldata order = orders[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if (!markets[address(order.vTokenBorrowed)].isListed) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                revert MarketNotListed(address(order.vTokenBorrowed));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            if (!markets[address(orders[i].vTokenCollateral)].isListed) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-                revert MarketNotListed(address(orders[i].vTokenCollateral));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if (!markets[address(order.vTokenCollateral)].isListed) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+                revert MarketNotListed(address(order.vTokenCollateral));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-            LiquidationOrder calldata order = orders[i];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">             order.vTokenBorrowed.forceLiquidateBorrow(</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 msg.sender,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                 borrower,</span></span></span></code></pre>\n<h2 id=\"g-13-using-storage-instead-of-memory-for-structsarrays-saves-gas\" style=\"position:relative;\"><a href=\"#g-13-using-storage-instead-of-memory-for-structsarrays-saves-gas\" aria-label=\"g 13 using storage instead of memory for structsarrays saves gas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-13] Using storage instead of memory for structs/arrays saves gas</h2>\n<p>Using a memory pointer for a storage struct/array will effectively load all the fields of that data type from storage (SLOAD) into memory (MSTORE). Using a storage pointer will allow you to read specific fields from storage as you need them. If you are not going to use all of the fields of your data type then you should use a storage pointer so that you don’t incur extra <code>Gcoldsload (2100 gas)</code> for fields that you will never use.</p>\n<p><strong>Note:</strong> These are instances that the automated report missed.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L394\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L394</a></p>\n<p>Gas Savings for <code>PoolRegistry.createRegistryPool</code>, obtained via protocol’s tests: Avg 853 gas.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Min</th>\n<th>Max</th>\n<th>Avg</th>\n<th># calls</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before</td>\n<td>645562</td>\n<td>683114</td>\n<td>664419</td>\n<td>23</td>\n</tr>\n<tr>\n<td>After</td>\n<td>644720</td>\n<td>682260</td>\n<td>663566</td>\n<td>23</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"46\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pool</span><span class=\"mtk1\">/</span><span class=\"mtk12\">PoolRegistry</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">394</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">VenusPool</span><span class=\"mtk1\"> </span><span class=\"mtk12\">memory</span><span class=\"mtk1\"> </span><span class=\"mtk12\">venusPool</span><span class=\"mtk1\"> = </span><span class=\"mtk12\">_poolByComptroller</span><span class=\"mtk1\">[</span><span class=\"mtk12\">comptroller</span><span class=\"mtk1\">];</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"47\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/Pool/PoolRegistry.sol b/contracts/Pool/PoolRegistry.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 5cf376f..7d7c2e6 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/Pool/PoolRegistry.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/Pool/PoolRegistry.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -391,7 +391,7 @@ contract PoolRegistry is Ownable2StepUpgradeable, AccessControlledV8, PoolRegist</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      * @return The index of the registered Venus pool</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">      */</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">     function _registerPool(string calldata name, address comptroller) internal returns (uint256) {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        VenusPool memory venusPool = _poolByComptroller[comptroller];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        VenusPool storage venusPool = _poolByComptroller[comptroller];</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         require(venusPool.creator == address(0), &quot;PoolRegistry: Pool already exists in the directory.&quot;);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         _ensureValidName(name);</span></span></span></code></pre>\n<h2 id=\"g-14-multiple-accesses-of-a-mappingarray-should-use-a-storage-pointer\" style=\"position:relative;\"><a href=\"#g-14-multiple-accesses-of-a-mappingarray-should-use-a-storage-pointer\" aria-label=\"g 14 multiple accesses of a mappingarray should use a storage pointer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-14] Multiple accesses of a mapping/array should use a storage pointer</h2>\n<p>Caching a mapping’s value in a storage pointer when the value is accessed multiple times saves ~40 gas per access due to not having to perform the same offset calculation every time. Help the Optimizer by saving a storage variable’s reference instead of repeatedly fetching it.</p>\n<p>To achieve this, declare a storage pointer for the variable and use it instead of repeatedly fetching the reference in a map or an array. As an example, instead of repeatedly calling <code>stakes[tokenId_]</code>, save its reference via a storage pointer: <code>StakeInfo storage stakeInfo = stakes[tokenId_]</code> and use the pointer instead.</p>\n<p><em>For all instances and in-depth details of this issue, please see the warden’s <a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/538\">full report</a>.</em></p>\n<h2 id=\"g-15-use-do-while-loops-instead-of-for-loops\" style=\"position:relative;\"><a href=\"#g-15-use-do-while-loops-instead-of-for-loops\" aria-label=\"g 15 use do while loops instead of for loops permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-15] Use <code>do while loops</code> instead of for loops</h2>\n<p>A <code>do while</code> loop will cost less gas since the condition is not being checked for the first iteration.</p>\n<p><em>There are 10 instances of this issue.</em></p>\n<h2 id=\"g-16-use-assembly-to-perform-efficient-back-to-back-calls\" style=\"position:relative;\"><a href=\"#g-16-use-assembly-to-perform-efficient-back-to-back-calls\" aria-label=\"g 16 use assembly to perform efficient back to back calls permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[G-16] Use assembly to perform efficient back-to-back calls</h2>\n<p>If a similar external call is performed back-to-back, we can use assembly to reuse any function signatures and function parameters that stay the same. In addition, we can also reuse the same memory space for each function call (<code>scratch space</code> + <code>free memory pointer</code> + <code>zero slot</code>), which can potentially allow us to avoid memory expansion costs.</p>\n<p><strong>Note:</strong> In order to do this optimization safely we will cache the free memory pointer value and restore it once we are done with our function calls. We will also set the zero slot back to 0 if necessary.</p>\n<p><a href=\"https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L239-L245\">https://github.com/code-423n4/2023-05-venus/blob/main/contracts/Pool/PoolRegistry.sol#L239-L245</a></p>\n<p>Gas Savings for <code>PoolRegistry.createRegistryPool</code>, obtained via protocol’s tests: Avg 1049 gas.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>Min</th>\n<th>Max</th>\n<th>Avg</th>\n<th># calls</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Before</td>\n<td>645562</td>\n<td>683114</td>\n<td>664419</td>\n<td>23</td>\n</tr>\n<tr>\n<td>After</td>\n<td>644525</td>\n<td>682065</td>\n<td>663370</td>\n<td>23</td>\n</tr>\n</tbody>\n</table>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"solidity\" data-index=\"48\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">File: </span><span class=\"mtk12\">contracts</span><span class=\"mtk1\">/</span><span class=\"mtk12\">Pool</span><span class=\"mtk1\">/</span><span class=\"mtk12\">PoolRegistry</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">239</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">comptrollerProxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setCloseFactor</span><span class=\"mtk1\">(</span><span class=\"mtk12\">closeFactor</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">240</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">comptrollerProxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setLiquidationIncentive</span><span class=\"mtk1\">(</span><span class=\"mtk12\">liquidationIncentive</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">241</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">comptrollerProxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setMinLiquidatableCollateral</span><span class=\"mtk1\">(</span><span class=\"mtk12\">minLiquidatableCollateral</span><span class=\"mtk1\">);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">242</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">comptrollerProxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">setPriceOracle</span><span class=\"mtk1\">(</span><span class=\"mtk11\">PriceOracle</span><span class=\"mtk1\">(</span><span class=\"mtk12\">priceOracle</span><span class=\"mtk1\">));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">243</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">244</span><span class=\"mtk1\">:        </span><span class=\"mtk3\">// Start transferring ownership to msg.sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">245</span><span class=\"mtk1\">:        </span><span class=\"mtk12\">comptrollerProxy</span><span class=\"mtk1\">.</span><span class=\"mtk11\">transferOwnership</span><span class=\"mtk1\">(</span><span class=\"mtk12\">msg</span><span class=\"mtk1\">.</span><span class=\"mtk12\">sender</span><span class=\"mtk1\">);</span></span></span></code></pre>\n<pre class=\"grvsc-container dark-default-dark\" data-language=\"diff\" data-index=\"49\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">diff --git a/contracts/Pool/PoolRegistry.sol b/contracts/Pool/PoolRegistry.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">index 5cf376f..b2d696a 100644</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">--- a/contracts/Pool/PoolRegistry.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk4\">+++ b/contracts/Pool/PoolRegistry.sol</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">@@ -236,13 +236,28 @@ contract PoolRegistry is Ownable2StepUpgradeable, AccessControlledV8, PoolRegist</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         uint256 poolId = _registerPool(name, proxyAddress);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Set Venus pool parameters</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        comptrollerProxy.setCloseFactor(closeFactor);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        comptrollerProxy.setLiquidationIncentive(liquidationIncentive);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        comptrollerProxy.setMinLiquidatableCollateral(minLiquidatableCollateral);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        comptrollerProxy.setPriceOracle(PriceOracle(priceOracle));</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        // Start transferring ownership to msg.sender</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk8\">-        comptrollerProxy.transferOwnership(msg.sender);</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        assembly {</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            // function signature for setCloseFactor(uint256)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x00, 0x12348e96)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x20, calldataload(0x44))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if iszero(call(gas(), comptrollerProxy, 0x00, 0x1c, 0x24, 0x00, 0x00)) {revert(0, 0)}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            // function signature for setLiquidationIncentive(uint256)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x00, 0xa8431081)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x20, calldataload(0x64))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if iszero(call(gas(), comptrollerProxy, 0x00, 0x1c, 0x24, 0x00, 0x00)) {revert(0, 0)}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            // function signature for setMinLiquidatableCollateral(uint256)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x00, 0x520b6c74)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x20, calldataload(0x84))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if iszero(call(gas(), comptrollerProxy, 0x00, 0x1c, 0x24, 0x00, 0x00)) {revert(0, 0)}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            // function signature for setPriceOracle(address)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x00, 0x530e784f)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x20, calldataload(0xa4))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if iszero(call(gas(), comptrollerProxy, 0x00, 0x1c, 0x24, 0x00, 0x00)) {revert(0, 0)}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            // function signature for transferOwnership(address)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x00, 0xf2fde38b)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            mstore(0x20, caller())</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+            if iszero(call(gas(), comptrollerProxy, 0x00, 0x1c, 0x24, 0x00, 0x00)) {revert(0, 0)}</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk7\">+        }</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         // Register the pool with this PoolRegistry</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">         return (poolId, proxyAddress);</span></span></span></code></pre>\n<h2 id=\"gasreport-output-with-all-optimizations-applied\" style=\"position:relative;\"><a href=\"#gasreport-output-with-all-optimizations-applied\" aria-label=\"gasreport output with all optimizations applied permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GasReport output with all optimizations applied</h2>\n<p><em>Note: see <a href=\"https://github.com/code-423n4/2023-05-venus-findings/blob/main/data/JCN-G.md#gasreport-output-with-all-optimizations-applied\">GasReport</a> for more details.</em></p>\n<p><strong><a href=\"https://github.com/code-423n4/2023-05-venus-findings/issues/538#issuecomment-1560162579\">chechu (Venus) confirmed and commented</a>:</strong></p>\n<blockquote>\n<p>G-01\tConfirm<br>\nG-02\tTBD<br>\nG-03\tTBD<br>\nG-04\tConfirm<br>\nG-05\tConfirm<br>\nG-06\tConfirm<br>\nG-07\tConfirm<br>\nG-08\tConfirm<br>\nG-09\tConfirm<br>\nG-10\tDisagree with severity<br>\nG-11\tDisagree with severity<br>\nG-12\tDisagree with severity<br>\nG-13\tConfirm<br>\nG-14\tTBR<br>\nG-15\tDisagree with severity<br>\nG-16\tDisagree with severity<br></p>\n</blockquote>\n<hr>\n<h1 id=\"disclosures\" style=\"position:relative;\"><a href=\"#disclosures\" aria-label=\"disclosures permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Disclosures</h1>\n<p>C4 is an open organization governed by participants in the community.</p>\n<p>C4 Audits incentivize the discovery of exploits, vulnerabilities, and bugs in smart contracts. Security researchers are rewarded at an increasing rate for finding higher-risk issues. Audit submissions are judged by a knowledgeable security researcher and solidity developer and disclosed to sponsoring developers. C4 does not conduct formal verification regarding the provided code but instead provides final verification.</p>\n<p>C4 does not provide any guarantee or warranty regarding the security of this project. All smart contract software should be used at the sole risk and responsibility of users.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .dark-default-dark {\n    background-color: #1E1E1E;\n    color: #D4D4D4;\n  }\n  .dark-default-dark .mtk15 { color: #C586C0; }\n  .dark-default-dark .mtk1 { color: #D4D4D4; }\n  .dark-default-dark .mtk3 { color: #6A9955; }\n  .dark-default-dark .mtk7 { color: #B5CEA8; }\n  .dark-default-dark .mtk4 { color: #569CD6; }\n  .dark-default-dark .mtk11 { color: #DCDCAA; }\n  .dark-default-dark .mtk12 { color: #9CDCFE; }\n  .dark-default-dark .mtk8 { color: #CE9178; }\n  .dark-default-dark .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>",
  "toc": "<ul>\n<li>\n<p><a href=\"#overview\">Overview</a></p>\n<ul>\n<li><a href=\"#about-c4\">About C4</a></li>\n<li><a href=\"#wardens\">Wardens</a></li>\n</ul>\n</li>\n<li><a href=\"#summary\">Summary</a></li>\n<li><a href=\"#scope\">Scope</a></li>\n<li><a href=\"#severity-criteria\">Severity Criteria</a></li>\n<li>\n<p><a href=\"#high-risk-findings-1\">High Risk Findings (1)</a></p>\n<ul>\n<li><a href=\"#h-01-incorrect-blocksperyear-constant-in-whitepaperinterestratemodel\">[H-01] Incorrect <code>blocksPerYear</code> constant in <code>WhitepaperInterestRateModel</code></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#medium-risk-findings-16\">Medium Risk Findings (16)</a></p>\n<ul>\n<li><a href=\"#m-01-malicious-actor-can-win-an-auction-unfavorably-to-the-protocol-by-block-stuffing\">[M-01] Malicious actor can win an auction unfavorably to the protocol by block stuffing</a></li>\n<li><a href=\"#m-02-its-possible-to-borrow-redeem-transfer-tokens-and-exit-markets-with-outdated-collateral-prices-and-borrow-interest\">[M-02] It’s possible to borrow, redeem, transfer tokens and exit markets with outdated collateral prices and borrow interest</a></li>\n<li><a href=\"#m-03-liquidateaccount-will-fail-if-the-transaction-is-not-included-in-the-current-block\">[M-03] liquidateAccount will fail if the transaction is not included in the current block</a></li>\n<li><a href=\"#m-04-_ensuremaxloops-causes-liquidateaccount-to-fail-in-certain-conditions\">[M-04] <code>_ensureMaxLoops</code> causes liquidateAccount to fail in certain conditions</a></li>\n<li><a href=\"#m-05-bad-debt-in-poollenssolgetpoolbaddebt-is-not-calculated-correctly-in-usd\">[M-05] Bad Debt in PoolLens.sol#getPoolBadDebt() is not calculated correctly in USD</a></li>\n<li><a href=\"#m-06-potential-unjust-liquidation-after-exiting-market-\">[M-06] Potential Unjust Liquidation After Exiting Market </a></li>\n<li><a href=\"#m-07-dos-attack-prevents-refunding-previous-bid-in-shortfallsol-and-malicious-bidder-always-wins-the-auction\">[M-07] DOS attack prevents refunding previous bid in Shortfall.sol and malicious bidder always wins the auction</a></li>\n<li><a href=\"#m-08-borrower-can-cause-a-dos-by-frontrunning-a-liquidation-and-repaying-as-low-as-1-wei-of-the-current-debt\">[M-08] Borrower can cause a DoS by frontrunning a liquidation and repaying as low as 1 wei of the current debt</a></li>\n<li><a href=\"#m-09-shortfall-contract-might-transfer-an-incorrect-amount-of-tokens-to-the-highest-bidder\">[M-09] ShortFall contract might transfer an incorrect amount of tokens to the highest bidder.</a></li>\n<li><a href=\"#m-10-exchange-rate-can-be-manipulated\">[M-10] Exchange Rate can be manipulated</a></li>\n<li><a href=\"#m-11-riskfundswappoolsasset-does-not-allow-the-user-to-supply-deadline-which-may-cause-swap-revert\">[M-11] <code>RiskFund.swapPoolsAsset</code> does not allow the user to supply deadline, which may cause swap revert</a></li>\n<li><a href=\"#m-12-fix-utilization-rate-computation\">[M-12] Fix utilization rate computation</a></li>\n<li><a href=\"#m-13-comptrollerhealaccount-doesnt-distribute-rewards-for-a-healed-borrower\">[M-13] Comptroller.healAccount doesn’t distribute rewards for a healed borrower</a></li>\n<li><a href=\"#m-14-placebid-possible-participation-in-auctions-that-have-been-modified\">[M-14] placeBid() Possible participation in auctions that have been modified</a></li>\n<li><a href=\"#m-15-borrow-rate-calculation-can-cause-vtokenaccrueinterest-to-revert-dosing-all-major-functionality\">[M-15] Borrow rate calculation can cause VToken.accrueInterest() to revert, DoSing all major functionality</a></li>\n<li><a href=\"#m-16-sometimes-calculateborrowerreward-and-calculatesupplierreward-return-incorrect-results\">[M-16] Sometimes calculateBorrowerReward and calculateSupplierReward return incorrect results</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#low-risk-and-non-critical-issues\">Low Risk and Non-Critical Issues</a></p>\n<ul>\n<li><a href=\"#low-issue-summary\">Low Issue Summary</a></li>\n<li><a href=\"#01-poolregistrysupportmarket-cannot-be-paused\">01 <code>PoolRegistry.supportMarket()</code> cannot be paused</a></li>\n<li><a href=\"#02-lack-of-revert-if-price-returned-from-oracle-is-zero\">02 Lack of revert if price returned from oracle is zero</a></li>\n<li><a href=\"#03-solidity-version\">03 Solidity version</a></li>\n<li><a href=\"#04-state-update-after-external-calls\">04 State update after external calls</a></li>\n<li><a href=\"#05-check-for-stale-values-on-setter-functions\">05 Check for stale values on setter functions</a></li>\n<li><a href=\"#06-variable-shadow\">06 Variable shadow</a></li>\n<li><a href=\"#07-consistent-usage-of-require-vs-custom-error\">07 Consistent usage of require vs custom error</a></li>\n<li><a href=\"#08-avoid-duplicated-computation-in-comptrolleraddrewardsdistributor\">08 Avoid duplicated computation in <code>Comptroller.addRewardsDistributor()</code></a></li>\n<li><a href=\"#09-eslint-warning-in-a-solidity-file\">09 Eslint warning in a solidity file</a></li>\n<li><a href=\"#10-interchangeable-usage-of-msgsender-and-vtoken-in-in-comptrollerpreborrowcheck\">10 Interchangeable usage of <code>msg.sender</code> and <code>vToken</code> in in <code>Comptroller.preBorrowCheck()</code></a></li>\n<li><a href=\"#11-using-underscore-in-a-single-struct-field\">11 Using underscore in a single struct field</a></li>\n<li><a href=\"#12-uncommented-fields-in-a-struct\">12 Uncommented fields in a struct</a></li>\n<li><a href=\"#13-use-return-named-variables-or-explicit-returns-consistently\">13 Use return named variables or explicit returns consistently</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#gas-optimizations\">Gas Optimizations</a></p>\n<ul>\n<li><a href=\"#summary-1\">Summary</a></li>\n<li><a href=\"#gas-optimizations-1\">Gas Optimizations</a></li>\n<li><a href=\"#g-01-state-variables-only-set-in-the-constructor-should-be-declared-immutable\">G-01 State variables only set in the constructor should be declared immutable</a></li>\n<li><a href=\"#g-02-state-variables-can-be-packed-to-use-fewer-storage-slots\">G-02 State variables can be packed to use fewer storage slots</a></li>\n<li><a href=\"#g-03-structs-can-be-packed-to-use-fewer-storage-slots\">G-03 Structs can be packed to use fewer storage slots</a></li>\n<li><a href=\"#g-04-state-variables-can-be-cached-instead-of-re-reading-them-from-storage\">G-04 State variables can be cached instead of re-reading them from storage</a></li>\n<li><a href=\"#g-05-cache-state-variables-outside-of-loop-to-avoid-reading-storage-on-every-iteration\">G-05 Cache state variables outside of loop to avoid reading storage on every iteration</a></li>\n<li><a href=\"#g-06-avoid-emitting-storage-values\">G-06 Avoid emitting storage values</a></li>\n<li><a href=\"#g-07-use-calldata-instead-of-memory-for-function-arguments-that-do-not-get-mutated\">G-07 Use calldata instead of memory for function arguments that do not get mutated</a></li>\n<li><a href=\"#g-08-refactor-internal-function-to-avoid-unnecessary-sload\">G-08 Refactor internal function to avoid unnecessary SLOAD</a></li>\n<li><a href=\"#g-09-return-values-from-external-calls-can-be-cached-to-avoid-unnecessary-call\">G-09 Return values from external calls can be cached to avoid unnecessary call</a></li>\n<li><a href=\"#g-10-a-mapping-is-more-efficient-than-an-array\">G-10 A mapping is more efficient than an array</a></li>\n<li><a href=\"#g-11-move-storage-pointer-to-top-of-function-to-avoid-offset-calculation\">G-11 Move storage pointer to top of function to avoid offset calculation</a></li>\n<li><a href=\"#g-12-move-calldata-pointer-to-top-of-for-loop-to-avoid-offset-calculations\">G-12 Move calldata pointer to top of for loop to avoid offset calculations</a></li>\n<li><a href=\"#g-13-using-storage-instead-of-memory-for-structsarrays-saves-gas\">G-13 Using storage instead of memory for structs/arrays saves gas</a></li>\n<li><a href=\"#g-14-multiple-accesses-of-a-mappingarray-should-use-a-storage-pointer\">G-14 Multiple accesses of a mapping/array should use a storage pointer</a></li>\n<li><a href=\"#g-15-use-do-while-loops-instead-of-for-loops\">G-15 Use <code>do while loops</code> instead of for loops</a></li>\n<li><a href=\"#g-16-use-assembly-to-perform-efficient-back-to-back-calls\">G-16 Use assembly to perform efficient back-to-back calls</a></li>\n<li><a href=\"#gasreport-output-with-all-optimizations-applied\">GasReport output with all optimizations applied</a></li>\n</ul>\n</li>\n<li><a href=\"#disclosures\">Disclosures</a></li>\n</ul>"
}