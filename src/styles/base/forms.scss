@import "../variables";

// CSS rule order
// --------------------

// 1. Variables
// 2. Box model properties
// 3. Display and position
// 4. Background
// 5. Border
// 6. Box shadow
// 7. Text
// 8. Transforms
// 9. Other

// TODO: Should this go in variables?
@mixin form-element {
  display: block;
  width: 100%;
  padding: $spacing__s;
  border: 1px solid $color__n-80;
  border-radius: $border-radius__m;
  font-size: 1rem;
  line-height: 1.5;
  color: $color__white;
  background-color: $color__n-80;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;

  &:focus {
    border-color: $color__button-blurple;
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba($color__button-blurple, 0.25);
  }
  &:disabled {
    background-color: $color__n-70;
    border-color: $color__n-70;
    color: $color__n-40;
  }
  &::placeholder {
    color: $color__n-20;
  }
}
input[type="text"],
input[type="password"],
input[type="email"],
input[type="tel"],
input[type="number"],
input[type="search"],
textarea {
  @include form-element;
}

textarea {
  resize: vertical;
}

// Default Spacing
// --------------------

form,
.form {
  p {
    margin-bottom: $spacing__s;
  }
  // TODO: replace these with fieldsets in the html, then remove this
  > div {
    margin-bottom: $spacing__l;
  }
}
fieldset {
  margin: $spacing__l 0;

  &:has(fieldset) {
    margin-bottom: 0;
  }
}
// Default Labels
// --------------------

form,
.form {
  label {
    padding-bottom: $spacing__s;
    display: block;
    color: $color__white;
    font-weight: 600;

    // Firefox doesn't support :has() yet
    &:has(~ p) {
      padding-bottom: 0;
    }

    ~ p,
    .form__help-text {
      padding-top: 0;
      font-size: $font-size__small;
    }
  }
}

// Default Errors
// --------------------

// TODO: This could be better with more javascript and less reliance on has()
// Firefox users won't see the error outline color
form > div:has(.form-field__error) {
  input[type="text"],
  input[type="password"],
  input[type="email"],
  input[type="tel"],
  input[type="number"],
  input[type="search"],
  textarea {
    border-color: $color__form-error;
  }
}
.form-field__error {
  margin-top: $spacing__s;
}

// Checkboxes
// --------------------

input[type="checkbox"] {
  display: inline-block;
  margin-right: $spacing__s;
}

// How to use:
//
// TODO - Finish this
//
// div.checkbox
//   input
//   label

// .checkbox {
//   margin: $spacing__l 0 $spacing__s 0;
// }

// .checkbox input[type="checkbox"] {
//   opacity: 0;
// }

// .checkbox label {
//   position: relative;
//   display: inline-block;
//   padding-left: $spacing__l;
// }

// .checkbox label::before,
// .checkbox label::after {
//   position: absolute;
//   content: "";
//   display: inline-block;
// }

// // Outer checkbox
// .checkbox label::before {
//   height: $spacing__m;
//   width: $spacing__m;

//   border: 1px solid;
//   left: 0px;
//   top: $spacing__xs;
// }

// .checkbox label::after {
//   height: 0.3125rem;
//   width: 0.5625rem;
//   border-left: $spacing__xxs solid;
//   border-bottom: $spacing__xxs solid;

//   transform: rotate(-45deg);

//   left: 4px;
//   top: $spacing__s;
// }

// .checkbox input[type="checkbox"] + label::after {
//   content: none;
// }
// .checkbox input[type="checkbox"]:checked + label::after {
//   content: "";
// }
// .checkbox input[type="checkbox"]:focus + label::before {
//   outline: rgb(59, 153, 252) auto 0.3125rem;
// }

// React Select
// --------------------
// TODO: see if after we finish the upgrade that we can remove the .limited-width specificity here
// TODO: Review these styles
// TODO: There's some low contrast
.limited-width {
  .react-select {
    margin: $spacing__m 0;
  }
  .react-select__control {
    background-color: $color__n-80;
    padding: 0;
    color: white;
    border: 2px solid transparent;

    &:hover {
      cursor: pointer;
    }
  }

  .react-select__control--is-focused,
  .react-select__control--is-focused:focus-within {
    border: 2px solid $color__n-60;
  }

  .react-select__indicator-separator {
    background-color: $color__n-30;
  }

  .react-select__indicator {
    color: $color__white;
    &:focus,
    &:hover {
      color: $color__white;
    }
  }

  .react-select__single-value {
    color: white;
  }

  /* inside the select */

  .react-select__menu {
    background-color: $color__n-80;
    color: $color__white;
  }

  .react-select__option--is-focused {
    background-color: $color__n-60;
    outline: 2px solid $color__n-60;
  }

  .react-select__placeholder {
    color: $color__white;
    opacity: 0.5;
    font-size: 0.9em;
  }

  .react-select__input {
    color: $color__white;
  }

  .react-select__multi-value {
    background-color: $color__n-60;
    color: $color__white;
  }

  .react-select__multi-value__remove:hover {
    color: var(--hot-pink);
    background-color: rgba(255, 255, 255, 0.1);
  }
}

// Form info blobs
// --------------------
//
// How to use
//
// .form__info-blob
//   svg (or anything with .icon)
//   p

.form__info-blob {
  display: flex;
  align-items: flex-start;
  margin: $spacing__s 0;
  padding: $spacing__m;
  border-radius: $border-radius__m;
  background-color: $color__n-90;
  border: 1px solid $color__n-60;
  color: $color__white;
  font-size: $font-size__small;
  line-height: 1.5;
  svg,
  .icon {
    margin-right: $spacing__s;
  }
  p {
    margin-bottom: 0;
  }
}

// Markdown
// --------------------

.widget__markdown {
  border: 1px solid $color__n-60;
  padding: $spacing__m;
  border-radius: $border-radius__m;
  min-height: 25rem;

  @include breakpoint($breakpoint__m) {
    padding: $spacing__l;
  }
}

.widget__textarea-container {
  textarea {
    min-height: 25rem;
  }
}

// TODO - Review this code
.widget__markdown {
  overflow: auto;

  h1,
  h2,
  h3 {
    font-weight: 600;
    text-align: left;
    color: white;
    margin-top: 1em;
    padding-bottom: 8px;
    border-bottom: 1px solid $color__n-60;
  }
  h1 {
    font-size: 28px;
  }
  h2 {
    font-size: 24px;
  }
  h3 {
    font-size: 20px;
  }

  pre {
    padding: 16px;
    overflow: auto;
    font-size: 85%;
    line-height: 1.45;
    background-color: $color__n-80;
    border-radius: $border-radius__m;

    &::-webkit-scrollbar {
      height: 5px;
    }

    &::-webkit-scrollbar-thumb {
      height: 5px;
    }
  }

  code {
    padding: 0;
    margin: 0;
    background-color: $color__n-80;
    display: inline;
    overflow: visible;
    line-height: inherit;
    word-wrap: normal;
  }

  table {
    border-collapse: collapse;
    margin-bottom: $spacing__m;
  }

  tbody {
    tr:nth-child(2n) {
      background-color: $color__n-90;
    }
  }

  td,
  th {
    border: 1px solid $color__n-60;
    padding: 6px 13px;
  }
}

// Radio buttons
// --------------------

// TODO this is too specific
.form .form__radio {
  display: flex;
  align-items: center;
  margin-bottom: $spacing__s;
  input {
    margin-right: $spacing__s;
  }
}

// Selects
// --------------------

select {
  // A reset of styles, including removing the default dropdown arrow
  appearance: none;
  background-color: transparent;
  border: none;
  padding: 0 1em 0 0;
  margin: 0;
  width: 100%;
  font-family: inherit;
  font-size: inherit;
  cursor: inherit;
  line-height: inherit;

  // Stack above custom arrow
  z-index: 1;

  // Remove dropdown arrow in IE10 & IE11
  // @link https://www.filamentgroup.com/lab/select-css.html
  &::-ms-expand {
    display: none;
  }

  // Remove focus outline, will add on alternate element
  outline: none;
}

select {
  display: grid;
  grid-template-areas: "select";
  align-items: center;
  position: relative;
  color: $color__white;

  select,
  &::after {
    grid-area: select;
  }

  min-width: 15ch;
  max-width: 30ch;

  border: 1px solid $color__n-30;
  border-radius: 0.25em;
  padding: 0.25em 0.5em;

  font-size: 1.25rem;
  cursor: pointer;
  line-height: 1.1;

  // Optional styles
  // remove for transparency
  background-color: $color__n-80;

  // Custom arrow
  &:not(.select--multiple)::after {
    content: "";
    justify-self: end;
    width: 0.8em;
    height: 0.5em;
    background-color: $color__n-30;
    clip-path: polygon(100% 0%, 0 0%, 50% 100%);
  }
}

// Interim solution until :focus-within has better support
select:focus + .focus {
  position: absolute;
  top: -1px;
  left: -1px;
  right: -1px;
  bottom: -1px;
  border: 2px solid $color__n-70;
  border-radius: inherit;
}

select[multiple] {
  padding-right: 0;

  /*
   * Safari will not reveal an option
   * unless the select height has room to 
   * show all of it
   * Firefox and Chrome allow showing 
   * a partial option
   */
  height: 6rem;

  option {
    white-space: normal;

    // Only affects Chrome
    outline-color: $color__n-30;
  }
}
